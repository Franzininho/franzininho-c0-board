
fw_fabrica_franzininhoC0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002230  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  080022f0  080022f0  000122f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080023b4  080023b4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080023b4  080023b4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080023b4  080023b4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080023b4  080023b4  000123b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080023b8  080023b8  000123b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080023bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000000c  080023c8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  080023c8  000200c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009c09  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a3c  00000000  00000000  00029c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000750  00000000  00000000  0002b6c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000599  00000000  00000000  0002be10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00012355  00000000  00000000  0002c3a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a946  00000000  00000000  0003e6fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00070407  00000000  00000000  00049044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000018ac  00000000  00000000  000b944c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000086  00000000  00000000  000bacf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080022d8 	.word	0x080022d8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080022d8 	.word	0x080022d8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80003f4:	b590      	push	{r4, r7, lr}
 80003f6:	b089      	sub	sp, #36	; 0x24
 80003f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003fa:	240c      	movs	r4, #12
 80003fc:	193b      	adds	r3, r7, r4
 80003fe:	0018      	movs	r0, r3
 8000400:	2314      	movs	r3, #20
 8000402:	001a      	movs	r2, r3
 8000404:	2100      	movs	r1, #0
 8000406:	f001 ff31 	bl	800226c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800040a:	4b23      	ldr	r3, [pc, #140]	; (8000498 <MX_GPIO_Init+0xa4>)
 800040c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800040e:	4b22      	ldr	r3, [pc, #136]	; (8000498 <MX_GPIO_Init+0xa4>)
 8000410:	2102      	movs	r1, #2
 8000412:	430a      	orrs	r2, r1
 8000414:	635a      	str	r2, [r3, #52]	; 0x34
 8000416:	4b20      	ldr	r3, [pc, #128]	; (8000498 <MX_GPIO_Init+0xa4>)
 8000418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800041a:	2202      	movs	r2, #2
 800041c:	4013      	ands	r3, r2
 800041e:	60bb      	str	r3, [r7, #8]
 8000420:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000422:	4b1d      	ldr	r3, [pc, #116]	; (8000498 <MX_GPIO_Init+0xa4>)
 8000424:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000426:	4b1c      	ldr	r3, [pc, #112]	; (8000498 <MX_GPIO_Init+0xa4>)
 8000428:	2101      	movs	r1, #1
 800042a:	430a      	orrs	r2, r1
 800042c:	635a      	str	r2, [r3, #52]	; 0x34
 800042e:	4b1a      	ldr	r3, [pc, #104]	; (8000498 <MX_GPIO_Init+0xa4>)
 8000430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000432:	2201      	movs	r2, #1
 8000434:	4013      	ands	r3, r2
 8000436:	607b      	str	r3, [r7, #4]
 8000438:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 800043a:	4b18      	ldr	r3, [pc, #96]	; (800049c <MX_GPIO_Init+0xa8>)
 800043c:	2200      	movs	r2, #0
 800043e:	21c0      	movs	r1, #192	; 0xc0
 8000440:	0018      	movs	r0, r3
 8000442:	f000 fcda 	bl	8000dfa <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin;
 8000446:	193b      	adds	r3, r7, r4
 8000448:	22c0      	movs	r2, #192	; 0xc0
 800044a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800044c:	193b      	adds	r3, r7, r4
 800044e:	2201      	movs	r2, #1
 8000450:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000452:	193b      	adds	r3, r7, r4
 8000454:	2200      	movs	r2, #0
 8000456:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000458:	193b      	adds	r3, r7, r4
 800045a:	2200      	movs	r2, #0
 800045c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800045e:	193b      	adds	r3, r7, r4
 8000460:	4a0e      	ldr	r2, [pc, #56]	; (800049c <MX_GPIO_Init+0xa8>)
 8000462:	0019      	movs	r1, r3
 8000464:	0010      	movs	r0, r2
 8000466:	f000 fb41 	bl	8000aec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800046a:	0021      	movs	r1, r4
 800046c:	187b      	adds	r3, r7, r1
 800046e:	2280      	movs	r2, #128	; 0x80
 8000470:	0052      	lsls	r2, r2, #1
 8000472:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000474:	187b      	adds	r3, r7, r1
 8000476:	2200      	movs	r2, #0
 8000478:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800047a:	187b      	adds	r3, r7, r1
 800047c:	2201      	movs	r2, #1
 800047e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000480:	187a      	adds	r2, r7, r1
 8000482:	23a0      	movs	r3, #160	; 0xa0
 8000484:	05db      	lsls	r3, r3, #23
 8000486:	0011      	movs	r1, r2
 8000488:	0018      	movs	r0, r3
 800048a:	f000 fb2f 	bl	8000aec <HAL_GPIO_Init>

}
 800048e:	46c0      	nop			; (mov r8, r8)
 8000490:	46bd      	mov	sp, r7
 8000492:	b009      	add	sp, #36	; 0x24
 8000494:	bd90      	pop	{r4, r7, pc}
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	40021000 	.word	0x40021000
 800049c:	50000400 	.word	0x50000400

080004a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b090      	sub	sp, #64	; 0x40
 80004a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004a6:	f000 f9bc 	bl	8000822 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004aa:	f000 f849 	bl	8000540 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ae:	f7ff ffa1 	bl	80003f4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80004b2:	f000 f8dd 	bl	8000670 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  const uint8_t msg[] = "Franzininho C0\r\nSaiba mais em: docs.franzininho.com.br\r\n";
 80004b6:	1d3a      	adds	r2, r7, #4
 80004b8:	4b1e      	ldr	r3, [pc, #120]	; (8000534 <main+0x94>)
 80004ba:	0010      	movs	r0, r2
 80004bc:	0019      	movs	r1, r3
 80004be:	2339      	movs	r3, #57	; 0x39
 80004c0:	001a      	movs	r2, r3
 80004c2:	f001 feff 	bl	80022c4 <memcpy>
  uint16_t i = 0;
 80004c6:	233e      	movs	r3, #62	; 0x3e
 80004c8:	18fb      	adds	r3, r7, r3
 80004ca:	2200      	movs	r2, #0
 80004cc:	801a      	strh	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_Delay(100);			//delay 100 ms
 80004ce:	2064      	movs	r0, #100	; 0x64
 80004d0:	f000 fa24 	bl	800091c <HAL_Delay>
	i++;
 80004d4:	213e      	movs	r1, #62	; 0x3e
 80004d6:	187b      	adds	r3, r7, r1
 80004d8:	881a      	ldrh	r2, [r3, #0]
 80004da:	187b      	adds	r3, r7, r1
 80004dc:	3201      	adds	r2, #1
 80004de:	801a      	strh	r2, [r3, #0]
	if(i>=10)
 80004e0:	187b      	adds	r3, r7, r1
 80004e2:	881b      	ldrh	r3, [r3, #0]
 80004e4:	2b09      	cmp	r3, #9
 80004e6:	d90d      	bls.n	8000504 <main+0x64>
	{
	 i= 0; //reinicia contador
 80004e8:	187b      	adds	r3, r7, r1
 80004ea:	2200      	movs	r2, #0
 80004ec:	801a      	strh	r2, [r3, #0]
	 HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);	//inverte LED1
 80004ee:	4b12      	ldr	r3, [pc, #72]	; (8000538 <main+0x98>)
 80004f0:	2140      	movs	r1, #64	; 0x40
 80004f2:	0018      	movs	r0, r3
 80004f4:	f000 fc9e 	bl	8000e34 <HAL_GPIO_TogglePin>
	 HAL_UART_Transmit(&huart1,msg, sizeof(msg)-1,100); //envia mensagem na serial
 80004f8:	1d39      	adds	r1, r7, #4
 80004fa:	4810      	ldr	r0, [pc, #64]	; (800053c <main+0x9c>)
 80004fc:	2364      	movs	r3, #100	; 0x64
 80004fe:	2238      	movs	r2, #56	; 0x38
 8000500:	f001 f94a 	bl	8001798 <HAL_UART_Transmit>
	}
	if(!HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin)) //se botão pressionado
 8000504:	2380      	movs	r3, #128	; 0x80
 8000506:	005a      	lsls	r2, r3, #1
 8000508:	23a0      	movs	r3, #160	; 0xa0
 800050a:	05db      	lsls	r3, r3, #23
 800050c:	0011      	movs	r1, r2
 800050e:	0018      	movs	r0, r3
 8000510:	f000 fc56 	bl	8000dc0 <HAL_GPIO_ReadPin>
 8000514:	1e03      	subs	r3, r0, #0
 8000516:	d106      	bne.n	8000526 <main+0x86>
	{
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin,1);	//liga LED2
 8000518:	4b07      	ldr	r3, [pc, #28]	; (8000538 <main+0x98>)
 800051a:	2201      	movs	r2, #1
 800051c:	2180      	movs	r1, #128	; 0x80
 800051e:	0018      	movs	r0, r3
 8000520:	f000 fc6b 	bl	8000dfa <HAL_GPIO_WritePin>
 8000524:	e7d3      	b.n	80004ce <main+0x2e>
	}
	else
	{
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin,0);	//liga LED2
 8000526:	4b04      	ldr	r3, [pc, #16]	; (8000538 <main+0x98>)
 8000528:	2200      	movs	r2, #0
 800052a:	2180      	movs	r1, #128	; 0x80
 800052c:	0018      	movs	r0, r3
 800052e:	f000 fc64 	bl	8000dfa <HAL_GPIO_WritePin>
	HAL_Delay(100);			//delay 100 ms
 8000532:	e7cc      	b.n	80004ce <main+0x2e>
 8000534:	080022f0 	.word	0x080022f0
 8000538:	50000400 	.word	0x50000400
 800053c:	20000028 	.word	0x20000028

08000540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000540:	b590      	push	{r4, r7, lr}
 8000542:	b08d      	sub	sp, #52	; 0x34
 8000544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000546:	2414      	movs	r4, #20
 8000548:	193b      	adds	r3, r7, r4
 800054a:	0018      	movs	r0, r3
 800054c:	231c      	movs	r3, #28
 800054e:	001a      	movs	r2, r3
 8000550:	2100      	movs	r1, #0
 8000552:	f001 fe8b 	bl	800226c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000556:	003b      	movs	r3, r7
 8000558:	0018      	movs	r0, r3
 800055a:	2314      	movs	r3, #20
 800055c:	001a      	movs	r2, r3
 800055e:	2100      	movs	r1, #0
 8000560:	f001 fe84 	bl	800226c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000564:	193b      	adds	r3, r7, r4
 8000566:	2202      	movs	r2, #2
 8000568:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800056a:	193b      	adds	r3, r7, r4
 800056c:	2280      	movs	r2, #128	; 0x80
 800056e:	0052      	lsls	r2, r2, #1
 8000570:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV4;
 8000572:	193b      	adds	r3, r7, r4
 8000574:	2280      	movs	r2, #128	; 0x80
 8000576:	0152      	lsls	r2, r2, #5
 8000578:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800057a:	193b      	adds	r3, r7, r4
 800057c:	2240      	movs	r2, #64	; 0x40
 800057e:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000580:	193b      	adds	r3, r7, r4
 8000582:	0018      	movs	r0, r3
 8000584:	f000 fc72 	bl	8000e6c <HAL_RCC_OscConfig>
 8000588:	1e03      	subs	r3, r0, #0
 800058a:	d001      	beq.n	8000590 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800058c:	f000 f81c 	bl	80005c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000590:	003b      	movs	r3, r7
 8000592:	2207      	movs	r2, #7
 8000594:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000596:	003b      	movs	r3, r7
 8000598:	2200      	movs	r2, #0
 800059a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800059c:	003b      	movs	r3, r7
 800059e:	2200      	movs	r2, #0
 80005a0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80005a2:	003b      	movs	r3, r7
 80005a4:	2200      	movs	r2, #0
 80005a6:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80005a8:	003b      	movs	r3, r7
 80005aa:	2200      	movs	r2, #0
 80005ac:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005ae:	003b      	movs	r3, r7
 80005b0:	2100      	movs	r1, #0
 80005b2:	0018      	movs	r0, r3
 80005b4:	f000 fe3e 	bl	8001234 <HAL_RCC_ClockConfig>
 80005b8:	1e03      	subs	r3, r0, #0
 80005ba:	d001      	beq.n	80005c0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80005bc:	f000 f804 	bl	80005c8 <Error_Handler>
  }
}
 80005c0:	46c0      	nop			; (mov r8, r8)
 80005c2:	46bd      	mov	sp, r7
 80005c4:	b00d      	add	sp, #52	; 0x34
 80005c6:	bd90      	pop	{r4, r7, pc}

080005c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005cc:	b672      	cpsid	i
}
 80005ce:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005d0:	e7fe      	b.n	80005d0 <Error_Handler+0x8>
	...

080005d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005da:	4b12      	ldr	r3, [pc, #72]	; (8000624 <HAL_MspInit+0x50>)
 80005dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80005de:	4b11      	ldr	r3, [pc, #68]	; (8000624 <HAL_MspInit+0x50>)
 80005e0:	2101      	movs	r1, #1
 80005e2:	430a      	orrs	r2, r1
 80005e4:	641a      	str	r2, [r3, #64]	; 0x40
 80005e6:	4b0f      	ldr	r3, [pc, #60]	; (8000624 <HAL_MspInit+0x50>)
 80005e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ea:	2201      	movs	r2, #1
 80005ec:	4013      	ands	r3, r2
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f2:	4b0c      	ldr	r3, [pc, #48]	; (8000624 <HAL_MspInit+0x50>)
 80005f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80005f6:	4b0b      	ldr	r3, [pc, #44]	; (8000624 <HAL_MspInit+0x50>)
 80005f8:	2180      	movs	r1, #128	; 0x80
 80005fa:	0549      	lsls	r1, r1, #21
 80005fc:	430a      	orrs	r2, r1
 80005fe:	63da      	str	r2, [r3, #60]	; 0x3c
 8000600:	4b08      	ldr	r3, [pc, #32]	; (8000624 <HAL_MspInit+0x50>)
 8000602:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000604:	2380      	movs	r3, #128	; 0x80
 8000606:	055b      	lsls	r3, r3, #21
 8000608:	4013      	ands	r3, r2
 800060a:	603b      	str	r3, [r7, #0]
 800060c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  HAL_SYSCFG_EnableRemap(SYSCFG_REMAP_PA11);
 800060e:	2008      	movs	r0, #8
 8000610:	f000 f9a8 	bl	8000964 <HAL_SYSCFG_EnableRemap>
  HAL_SYSCFG_EnableRemap(SYSCFG_REMAP_PA12);
 8000614:	2010      	movs	r0, #16
 8000616:	f000 f9a5 	bl	8000964 <HAL_SYSCFG_EnableRemap>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	46bd      	mov	sp, r7
 800061e:	b002      	add	sp, #8
 8000620:	bd80      	pop	{r7, pc}
 8000622:	46c0      	nop			; (mov r8, r8)
 8000624:	40021000 	.word	0x40021000

08000628 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800062c:	e7fe      	b.n	800062c <NMI_Handler+0x4>

0800062e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800062e:	b580      	push	{r7, lr}
 8000630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000632:	e7fe      	b.n	8000632 <HardFault_Handler+0x4>

08000634 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000638:	46c0      	nop			; (mov r8, r8)
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}

0800063e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800063e:	b580      	push	{r7, lr}
 8000640:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000642:	46c0      	nop			; (mov r8, r8)
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}

08000648 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800064c:	f000 f94a 	bl	80008e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000650:	46c0      	nop			; (mov r8, r8)
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
	...

08000658 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800065c:	4b03      	ldr	r3, [pc, #12]	; (800066c <SystemInit+0x14>)
 800065e:	2280      	movs	r2, #128	; 0x80
 8000660:	0512      	lsls	r2, r2, #20
 8000662:	609a      	str	r2, [r3, #8]
#endif
}
 8000664:	46c0      	nop			; (mov r8, r8)
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	46c0      	nop			; (mov r8, r8)
 800066c:	e000ed00 	.word	0xe000ed00

08000670 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000674:	4b23      	ldr	r3, [pc, #140]	; (8000704 <MX_USART1_UART_Init+0x94>)
 8000676:	4a24      	ldr	r2, [pc, #144]	; (8000708 <MX_USART1_UART_Init+0x98>)
 8000678:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800067a:	4b22      	ldr	r3, [pc, #136]	; (8000704 <MX_USART1_UART_Init+0x94>)
 800067c:	22e1      	movs	r2, #225	; 0xe1
 800067e:	0252      	lsls	r2, r2, #9
 8000680:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000682:	4b20      	ldr	r3, [pc, #128]	; (8000704 <MX_USART1_UART_Init+0x94>)
 8000684:	2200      	movs	r2, #0
 8000686:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000688:	4b1e      	ldr	r3, [pc, #120]	; (8000704 <MX_USART1_UART_Init+0x94>)
 800068a:	2200      	movs	r2, #0
 800068c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800068e:	4b1d      	ldr	r3, [pc, #116]	; (8000704 <MX_USART1_UART_Init+0x94>)
 8000690:	2200      	movs	r2, #0
 8000692:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000694:	4b1b      	ldr	r3, [pc, #108]	; (8000704 <MX_USART1_UART_Init+0x94>)
 8000696:	220c      	movs	r2, #12
 8000698:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800069a:	4b1a      	ldr	r3, [pc, #104]	; (8000704 <MX_USART1_UART_Init+0x94>)
 800069c:	2200      	movs	r2, #0
 800069e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006a0:	4b18      	ldr	r3, [pc, #96]	; (8000704 <MX_USART1_UART_Init+0x94>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006a6:	4b17      	ldr	r3, [pc, #92]	; (8000704 <MX_USART1_UART_Init+0x94>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006ac:	4b15      	ldr	r3, [pc, #84]	; (8000704 <MX_USART1_UART_Init+0x94>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006b2:	4b14      	ldr	r3, [pc, #80]	; (8000704 <MX_USART1_UART_Init+0x94>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006b8:	4b12      	ldr	r3, [pc, #72]	; (8000704 <MX_USART1_UART_Init+0x94>)
 80006ba:	0018      	movs	r0, r3
 80006bc:	f001 f816 	bl	80016ec <HAL_UART_Init>
 80006c0:	1e03      	subs	r3, r0, #0
 80006c2:	d001      	beq.n	80006c8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80006c4:	f7ff ff80 	bl	80005c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006c8:	4b0e      	ldr	r3, [pc, #56]	; (8000704 <MX_USART1_UART_Init+0x94>)
 80006ca:	2100      	movs	r1, #0
 80006cc:	0018      	movs	r0, r3
 80006ce:	f001 fced 	bl	80020ac <HAL_UARTEx_SetTxFifoThreshold>
 80006d2:	1e03      	subs	r3, r0, #0
 80006d4:	d001      	beq.n	80006da <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80006d6:	f7ff ff77 	bl	80005c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006da:	4b0a      	ldr	r3, [pc, #40]	; (8000704 <MX_USART1_UART_Init+0x94>)
 80006dc:	2100      	movs	r1, #0
 80006de:	0018      	movs	r0, r3
 80006e0:	f001 fd24 	bl	800212c <HAL_UARTEx_SetRxFifoThreshold>
 80006e4:	1e03      	subs	r3, r0, #0
 80006e6:	d001      	beq.n	80006ec <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80006e8:	f7ff ff6e 	bl	80005c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80006ec:	4b05      	ldr	r3, [pc, #20]	; (8000704 <MX_USART1_UART_Init+0x94>)
 80006ee:	0018      	movs	r0, r3
 80006f0:	f001 fca2 	bl	8002038 <HAL_UARTEx_DisableFifoMode>
 80006f4:	1e03      	subs	r3, r0, #0
 80006f6:	d001      	beq.n	80006fc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80006f8:	f7ff ff66 	bl	80005c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006fc:	46c0      	nop			; (mov r8, r8)
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	46c0      	nop			; (mov r8, r8)
 8000704:	20000028 	.word	0x20000028
 8000708:	40013800 	.word	0x40013800

0800070c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800070c:	b590      	push	{r4, r7, lr}
 800070e:	b091      	sub	sp, #68	; 0x44
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000714:	232c      	movs	r3, #44	; 0x2c
 8000716:	18fb      	adds	r3, r7, r3
 8000718:	0018      	movs	r0, r3
 800071a:	2314      	movs	r3, #20
 800071c:	001a      	movs	r2, r3
 800071e:	2100      	movs	r1, #0
 8000720:	f001 fda4 	bl	800226c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000724:	2410      	movs	r4, #16
 8000726:	193b      	adds	r3, r7, r4
 8000728:	0018      	movs	r0, r3
 800072a:	231c      	movs	r3, #28
 800072c:	001a      	movs	r2, r3
 800072e:	2100      	movs	r1, #0
 8000730:	f001 fd9c 	bl	800226c <memset>
  if(uartHandle->Instance==USART1)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a23      	ldr	r2, [pc, #140]	; (80007c8 <HAL_UART_MspInit+0xbc>)
 800073a:	4293      	cmp	r3, r2
 800073c:	d13f      	bne.n	80007be <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800073e:	193b      	adds	r3, r7, r4
 8000740:	2201      	movs	r2, #1
 8000742:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000744:	193b      	adds	r3, r7, r4
 8000746:	2200      	movs	r2, #0
 8000748:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800074a:	193b      	adds	r3, r7, r4
 800074c:	0018      	movs	r0, r3
 800074e:	f000 fedf 	bl	8001510 <HAL_RCCEx_PeriphCLKConfig>
 8000752:	1e03      	subs	r3, r0, #0
 8000754:	d001      	beq.n	800075a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000756:	f7ff ff37 	bl	80005c8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800075a:	4b1c      	ldr	r3, [pc, #112]	; (80007cc <HAL_UART_MspInit+0xc0>)
 800075c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800075e:	4b1b      	ldr	r3, [pc, #108]	; (80007cc <HAL_UART_MspInit+0xc0>)
 8000760:	2180      	movs	r1, #128	; 0x80
 8000762:	01c9      	lsls	r1, r1, #7
 8000764:	430a      	orrs	r2, r1
 8000766:	641a      	str	r2, [r3, #64]	; 0x40
 8000768:	4b18      	ldr	r3, [pc, #96]	; (80007cc <HAL_UART_MspInit+0xc0>)
 800076a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800076c:	2380      	movs	r3, #128	; 0x80
 800076e:	01db      	lsls	r3, r3, #7
 8000770:	4013      	ands	r3, r2
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000776:	4b15      	ldr	r3, [pc, #84]	; (80007cc <HAL_UART_MspInit+0xc0>)
 8000778:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800077a:	4b14      	ldr	r3, [pc, #80]	; (80007cc <HAL_UART_MspInit+0xc0>)
 800077c:	2101      	movs	r1, #1
 800077e:	430a      	orrs	r2, r1
 8000780:	635a      	str	r2, [r3, #52]	; 0x34
 8000782:	4b12      	ldr	r3, [pc, #72]	; (80007cc <HAL_UART_MspInit+0xc0>)
 8000784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000786:	2201      	movs	r2, #1
 8000788:	4013      	ands	r3, r2
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9 [PA11]     ------> USART1_TX
    PA10 [PA12]     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800078e:	212c      	movs	r1, #44	; 0x2c
 8000790:	187b      	adds	r3, r7, r1
 8000792:	22c0      	movs	r2, #192	; 0xc0
 8000794:	00d2      	lsls	r2, r2, #3
 8000796:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000798:	187b      	adds	r3, r7, r1
 800079a:	2202      	movs	r2, #2
 800079c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	187b      	adds	r3, r7, r1
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a4:	187b      	adds	r3, r7, r1
 80007a6:	2200      	movs	r2, #0
 80007a8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80007aa:	187b      	adds	r3, r7, r1
 80007ac:	2201      	movs	r2, #1
 80007ae:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b0:	187a      	adds	r2, r7, r1
 80007b2:	23a0      	movs	r3, #160	; 0xa0
 80007b4:	05db      	lsls	r3, r3, #23
 80007b6:	0011      	movs	r1, r2
 80007b8:	0018      	movs	r0, r3
 80007ba:	f000 f997 	bl	8000aec <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80007be:	46c0      	nop			; (mov r8, r8)
 80007c0:	46bd      	mov	sp, r7
 80007c2:	b011      	add	sp, #68	; 0x44
 80007c4:	bd90      	pop	{r4, r7, pc}
 80007c6:	46c0      	nop			; (mov r8, r8)
 80007c8:	40013800 	.word	0x40013800
 80007cc:	40021000 	.word	0x40021000

080007d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007d0:	480d      	ldr	r0, [pc, #52]	; (8000808 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007d2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80007d4:	f7ff ff40 	bl	8000658 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80007d8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80007da:	e003      	b.n	80007e4 <LoopCopyDataInit>

080007dc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80007dc:	4b0b      	ldr	r3, [pc, #44]	; (800080c <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80007de:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80007e0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80007e2:	3104      	adds	r1, #4

080007e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80007e4:	480a      	ldr	r0, [pc, #40]	; (8000810 <LoopForever+0xa>)
  ldr r3, =_edata
 80007e6:	4b0b      	ldr	r3, [pc, #44]	; (8000814 <LoopForever+0xe>)
  adds r2, r0, r1
 80007e8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80007ea:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80007ec:	d3f6      	bcc.n	80007dc <CopyDataInit>
  ldr r2, =_sbss
 80007ee:	4a0a      	ldr	r2, [pc, #40]	; (8000818 <LoopForever+0x12>)
  b LoopFillZerobss
 80007f0:	e002      	b.n	80007f8 <LoopFillZerobss>

080007f2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80007f2:	2300      	movs	r3, #0
  str  r3, [r2]
 80007f4:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007f6:	3204      	adds	r2, #4

080007f8 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 80007f8:	4b08      	ldr	r3, [pc, #32]	; (800081c <LoopForever+0x16>)
  cmp r2, r3
 80007fa:	429a      	cmp	r2, r3
  bcc FillZerobss
 80007fc:	d3f9      	bcc.n	80007f2 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80007fe:	f001 fd3d 	bl	800227c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000802:	f7ff fe4d 	bl	80004a0 <main>

08000806 <LoopForever>:

LoopForever:
    b LoopForever
 8000806:	e7fe      	b.n	8000806 <LoopForever>
  ldr   r0, =_estack
 8000808:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 800080c:	080023bc 	.word	0x080023bc
  ldr r0, =_sdata
 8000810:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000814:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000818:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 800081c:	200000c0 	.word	0x200000c0

08000820 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000820:	e7fe      	b.n	8000820 <ADC1_IRQHandler>

08000822 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000822:	b580      	push	{r7, lr}
 8000824:	b082      	sub	sp, #8
 8000826:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000828:	1dfb      	adds	r3, r7, #7
 800082a:	2200      	movs	r2, #0
 800082c:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800082e:	2003      	movs	r0, #3
 8000830:	f000 f80e 	bl	8000850 <HAL_InitTick>
 8000834:	1e03      	subs	r3, r0, #0
 8000836:	d003      	beq.n	8000840 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000838:	1dfb      	adds	r3, r7, #7
 800083a:	2201      	movs	r2, #1
 800083c:	701a      	strb	r2, [r3, #0]
 800083e:	e001      	b.n	8000844 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000840:	f7ff fec8 	bl	80005d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000844:	1dfb      	adds	r3, r7, #7
 8000846:	781b      	ldrb	r3, [r3, #0]
}
 8000848:	0018      	movs	r0, r3
 800084a:	46bd      	mov	sp, r7
 800084c:	b002      	add	sp, #8
 800084e:	bd80      	pop	{r7, pc}

08000850 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000850:	b590      	push	{r4, r7, lr}
 8000852:	b085      	sub	sp, #20
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000858:	230f      	movs	r3, #15
 800085a:	18fb      	adds	r3, r7, r3
 800085c:	2200      	movs	r2, #0
 800085e:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000860:	4b1d      	ldr	r3, [pc, #116]	; (80008d8 <HAL_InitTick+0x88>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d02b      	beq.n	80008c0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000868:	4b1c      	ldr	r3, [pc, #112]	; (80008dc <HAL_InitTick+0x8c>)
 800086a:	681c      	ldr	r4, [r3, #0]
 800086c:	4b1a      	ldr	r3, [pc, #104]	; (80008d8 <HAL_InitTick+0x88>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	0019      	movs	r1, r3
 8000872:	23fa      	movs	r3, #250	; 0xfa
 8000874:	0098      	lsls	r0, r3, #2
 8000876:	f7ff fc47 	bl	8000108 <__udivsi3>
 800087a:	0003      	movs	r3, r0
 800087c:	0019      	movs	r1, r3
 800087e:	0020      	movs	r0, r4
 8000880:	f7ff fc42 	bl	8000108 <__udivsi3>
 8000884:	0003      	movs	r3, r0
 8000886:	0018      	movs	r0, r3
 8000888:	f000 f923 	bl	8000ad2 <HAL_SYSTICK_Config>
 800088c:	1e03      	subs	r3, r0, #0
 800088e:	d112      	bne.n	80008b6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	2b03      	cmp	r3, #3
 8000894:	d80a      	bhi.n	80008ac <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000896:	6879      	ldr	r1, [r7, #4]
 8000898:	2301      	movs	r3, #1
 800089a:	425b      	negs	r3, r3
 800089c:	2200      	movs	r2, #0
 800089e:	0018      	movs	r0, r3
 80008a0:	f000 f902 	bl	8000aa8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008a4:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <HAL_InitTick+0x90>)
 80008a6:	687a      	ldr	r2, [r7, #4]
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	e00d      	b.n	80008c8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80008ac:	230f      	movs	r3, #15
 80008ae:	18fb      	adds	r3, r7, r3
 80008b0:	2201      	movs	r2, #1
 80008b2:	701a      	strb	r2, [r3, #0]
 80008b4:	e008      	b.n	80008c8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80008b6:	230f      	movs	r3, #15
 80008b8:	18fb      	adds	r3, r7, r3
 80008ba:	2201      	movs	r2, #1
 80008bc:	701a      	strb	r2, [r3, #0]
 80008be:	e003      	b.n	80008c8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80008c0:	230f      	movs	r3, #15
 80008c2:	18fb      	adds	r3, r7, r3
 80008c4:	2201      	movs	r2, #1
 80008c6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80008c8:	230f      	movs	r3, #15
 80008ca:	18fb      	adds	r3, r7, r3
 80008cc:	781b      	ldrb	r3, [r3, #0]
}
 80008ce:	0018      	movs	r0, r3
 80008d0:	46bd      	mov	sp, r7
 80008d2:	b005      	add	sp, #20
 80008d4:	bd90      	pop	{r4, r7, pc}
 80008d6:	46c0      	nop			; (mov r8, r8)
 80008d8:	20000008 	.word	0x20000008
 80008dc:	20000000 	.word	0x20000000
 80008e0:	20000004 	.word	0x20000004

080008e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80008e8:	4b05      	ldr	r3, [pc, #20]	; (8000900 <HAL_IncTick+0x1c>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	001a      	movs	r2, r3
 80008ee:	4b05      	ldr	r3, [pc, #20]	; (8000904 <HAL_IncTick+0x20>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	18d2      	adds	r2, r2, r3
 80008f4:	4b03      	ldr	r3, [pc, #12]	; (8000904 <HAL_IncTick+0x20>)
 80008f6:	601a      	str	r2, [r3, #0]
}
 80008f8:	46c0      	nop			; (mov r8, r8)
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	46c0      	nop			; (mov r8, r8)
 8000900:	20000008 	.word	0x20000008
 8000904:	200000bc 	.word	0x200000bc

08000908 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  return uwTick;
 800090c:	4b02      	ldr	r3, [pc, #8]	; (8000918 <HAL_GetTick+0x10>)
 800090e:	681b      	ldr	r3, [r3, #0]
}
 8000910:	0018      	movs	r0, r3
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	46c0      	nop			; (mov r8, r8)
 8000918:	200000bc 	.word	0x200000bc

0800091c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000924:	f7ff fff0 	bl	8000908 <HAL_GetTick>
 8000928:	0003      	movs	r3, r0
 800092a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	3301      	adds	r3, #1
 8000934:	d005      	beq.n	8000942 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000936:	4b0a      	ldr	r3, [pc, #40]	; (8000960 <HAL_Delay+0x44>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	001a      	movs	r2, r3
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	189b      	adds	r3, r3, r2
 8000940:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000942:	46c0      	nop			; (mov r8, r8)
 8000944:	f7ff ffe0 	bl	8000908 <HAL_GetTick>
 8000948:	0002      	movs	r2, r0
 800094a:	68bb      	ldr	r3, [r7, #8]
 800094c:	1ad3      	subs	r3, r2, r3
 800094e:	68fa      	ldr	r2, [r7, #12]
 8000950:	429a      	cmp	r2, r3
 8000952:	d8f7      	bhi.n	8000944 <HAL_Delay+0x28>
  {
  }
}
 8000954:	46c0      	nop			; (mov r8, r8)
 8000956:	46c0      	nop			; (mov r8, r8)
 8000958:	46bd      	mov	sp, r7
 800095a:	b004      	add	sp, #16
 800095c:	bd80      	pop	{r7, pc}
 800095e:	46c0      	nop			; (mov r8, r8)
 8000960:	20000008 	.word	0x20000008

08000964 <HAL_SYSCFG_EnableRemap>:
  *         @arg @ref SYSCFG_REMAP_PA11
  *         @arg @ref SYSCFG_REMAP_PA12
  * @retval None
  */
void HAL_SYSCFG_EnableRemap(uint32_t PinRemap)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_HAL_REMAP_PIN(PinRemap));
  SET_BIT(SYSCFG->CFGR1, PinRemap);
 800096c:	4b04      	ldr	r3, [pc, #16]	; (8000980 <HAL_SYSCFG_EnableRemap+0x1c>)
 800096e:	6819      	ldr	r1, [r3, #0]
 8000970:	4b03      	ldr	r3, [pc, #12]	; (8000980 <HAL_SYSCFG_EnableRemap+0x1c>)
 8000972:	687a      	ldr	r2, [r7, #4]
 8000974:	430a      	orrs	r2, r1
 8000976:	601a      	str	r2, [r3, #0]
}
 8000978:	46c0      	nop			; (mov r8, r8)
 800097a:	46bd      	mov	sp, r7
 800097c:	b002      	add	sp, #8
 800097e:	bd80      	pop	{r7, pc}
 8000980:	40010000 	.word	0x40010000

08000984 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000984:	b590      	push	{r4, r7, lr}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	0002      	movs	r2, r0
 800098c:	6039      	str	r1, [r7, #0]
 800098e:	1dfb      	adds	r3, r7, #7
 8000990:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000992:	1dfb      	adds	r3, r7, #7
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	2b7f      	cmp	r3, #127	; 0x7f
 8000998:	d828      	bhi.n	80009ec <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800099a:	4a2f      	ldr	r2, [pc, #188]	; (8000a58 <__NVIC_SetPriority+0xd4>)
 800099c:	1dfb      	adds	r3, r7, #7
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	b25b      	sxtb	r3, r3
 80009a2:	089b      	lsrs	r3, r3, #2
 80009a4:	33c0      	adds	r3, #192	; 0xc0
 80009a6:	009b      	lsls	r3, r3, #2
 80009a8:	589b      	ldr	r3, [r3, r2]
 80009aa:	1dfa      	adds	r2, r7, #7
 80009ac:	7812      	ldrb	r2, [r2, #0]
 80009ae:	0011      	movs	r1, r2
 80009b0:	2203      	movs	r2, #3
 80009b2:	400a      	ands	r2, r1
 80009b4:	00d2      	lsls	r2, r2, #3
 80009b6:	21ff      	movs	r1, #255	; 0xff
 80009b8:	4091      	lsls	r1, r2
 80009ba:	000a      	movs	r2, r1
 80009bc:	43d2      	mvns	r2, r2
 80009be:	401a      	ands	r2, r3
 80009c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	019b      	lsls	r3, r3, #6
 80009c6:	22ff      	movs	r2, #255	; 0xff
 80009c8:	401a      	ands	r2, r3
 80009ca:	1dfb      	adds	r3, r7, #7
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	0018      	movs	r0, r3
 80009d0:	2303      	movs	r3, #3
 80009d2:	4003      	ands	r3, r0
 80009d4:	00db      	lsls	r3, r3, #3
 80009d6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009d8:	481f      	ldr	r0, [pc, #124]	; (8000a58 <__NVIC_SetPriority+0xd4>)
 80009da:	1dfb      	adds	r3, r7, #7
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	b25b      	sxtb	r3, r3
 80009e0:	089b      	lsrs	r3, r3, #2
 80009e2:	430a      	orrs	r2, r1
 80009e4:	33c0      	adds	r3, #192	; 0xc0
 80009e6:	009b      	lsls	r3, r3, #2
 80009e8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80009ea:	e031      	b.n	8000a50 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009ec:	4a1b      	ldr	r2, [pc, #108]	; (8000a5c <__NVIC_SetPriority+0xd8>)
 80009ee:	1dfb      	adds	r3, r7, #7
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	0019      	movs	r1, r3
 80009f4:	230f      	movs	r3, #15
 80009f6:	400b      	ands	r3, r1
 80009f8:	3b08      	subs	r3, #8
 80009fa:	089b      	lsrs	r3, r3, #2
 80009fc:	3306      	adds	r3, #6
 80009fe:	009b      	lsls	r3, r3, #2
 8000a00:	18d3      	adds	r3, r2, r3
 8000a02:	3304      	adds	r3, #4
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	1dfa      	adds	r2, r7, #7
 8000a08:	7812      	ldrb	r2, [r2, #0]
 8000a0a:	0011      	movs	r1, r2
 8000a0c:	2203      	movs	r2, #3
 8000a0e:	400a      	ands	r2, r1
 8000a10:	00d2      	lsls	r2, r2, #3
 8000a12:	21ff      	movs	r1, #255	; 0xff
 8000a14:	4091      	lsls	r1, r2
 8000a16:	000a      	movs	r2, r1
 8000a18:	43d2      	mvns	r2, r2
 8000a1a:	401a      	ands	r2, r3
 8000a1c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	019b      	lsls	r3, r3, #6
 8000a22:	22ff      	movs	r2, #255	; 0xff
 8000a24:	401a      	ands	r2, r3
 8000a26:	1dfb      	adds	r3, r7, #7
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	2303      	movs	r3, #3
 8000a2e:	4003      	ands	r3, r0
 8000a30:	00db      	lsls	r3, r3, #3
 8000a32:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a34:	4809      	ldr	r0, [pc, #36]	; (8000a5c <__NVIC_SetPriority+0xd8>)
 8000a36:	1dfb      	adds	r3, r7, #7
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	001c      	movs	r4, r3
 8000a3c:	230f      	movs	r3, #15
 8000a3e:	4023      	ands	r3, r4
 8000a40:	3b08      	subs	r3, #8
 8000a42:	089b      	lsrs	r3, r3, #2
 8000a44:	430a      	orrs	r2, r1
 8000a46:	3306      	adds	r3, #6
 8000a48:	009b      	lsls	r3, r3, #2
 8000a4a:	18c3      	adds	r3, r0, r3
 8000a4c:	3304      	adds	r3, #4
 8000a4e:	601a      	str	r2, [r3, #0]
}
 8000a50:	46c0      	nop			; (mov r8, r8)
 8000a52:	46bd      	mov	sp, r7
 8000a54:	b003      	add	sp, #12
 8000a56:	bd90      	pop	{r4, r7, pc}
 8000a58:	e000e100 	.word	0xe000e100
 8000a5c:	e000ed00 	.word	0xe000ed00

08000a60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	1e5a      	subs	r2, r3, #1
 8000a6c:	2380      	movs	r3, #128	; 0x80
 8000a6e:	045b      	lsls	r3, r3, #17
 8000a70:	429a      	cmp	r2, r3
 8000a72:	d301      	bcc.n	8000a78 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a74:	2301      	movs	r3, #1
 8000a76:	e010      	b.n	8000a9a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a78:	4b0a      	ldr	r3, [pc, #40]	; (8000aa4 <SysTick_Config+0x44>)
 8000a7a:	687a      	ldr	r2, [r7, #4]
 8000a7c:	3a01      	subs	r2, #1
 8000a7e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a80:	2301      	movs	r3, #1
 8000a82:	425b      	negs	r3, r3
 8000a84:	2103      	movs	r1, #3
 8000a86:	0018      	movs	r0, r3
 8000a88:	f7ff ff7c 	bl	8000984 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a8c:	4b05      	ldr	r3, [pc, #20]	; (8000aa4 <SysTick_Config+0x44>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a92:	4b04      	ldr	r3, [pc, #16]	; (8000aa4 <SysTick_Config+0x44>)
 8000a94:	2207      	movs	r2, #7
 8000a96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a98:	2300      	movs	r3, #0
}
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	b002      	add	sp, #8
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	46c0      	nop			; (mov r8, r8)
 8000aa4:	e000e010 	.word	0xe000e010

08000aa8 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	60b9      	str	r1, [r7, #8]
 8000ab0:	607a      	str	r2, [r7, #4]
 8000ab2:	210f      	movs	r1, #15
 8000ab4:	187b      	adds	r3, r7, r1
 8000ab6:	1c02      	adds	r2, r0, #0
 8000ab8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000aba:	68ba      	ldr	r2, [r7, #8]
 8000abc:	187b      	adds	r3, r7, r1
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	b25b      	sxtb	r3, r3
 8000ac2:	0011      	movs	r1, r2
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	f7ff ff5d 	bl	8000984 <__NVIC_SetPriority>
}
 8000aca:	46c0      	nop			; (mov r8, r8)
 8000acc:	46bd      	mov	sp, r7
 8000ace:	b004      	add	sp, #16
 8000ad0:	bd80      	pop	{r7, pc}

08000ad2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ad2:	b580      	push	{r7, lr}
 8000ad4:	b082      	sub	sp, #8
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	0018      	movs	r0, r3
 8000ade:	f7ff ffbf 	bl	8000a60 <SysTick_Config>
 8000ae2:	0003      	movs	r3, r0
}
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	b002      	add	sp, #8
 8000aea:	bd80      	pop	{r7, pc}

08000aec <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b086      	sub	sp, #24
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
 8000af4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8000af6:	2300      	movs	r3, #0
 8000af8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000afa:	e14d      	b.n	8000d98 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2101      	movs	r1, #1
 8000b02:	693a      	ldr	r2, [r7, #16]
 8000b04:	4091      	lsls	r1, r2
 8000b06:	000a      	movs	r2, r1
 8000b08:	4013      	ands	r3, r2
 8000b0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d100      	bne.n	8000b14 <HAL_GPIO_Init+0x28>
 8000b12:	e13e      	b.n	8000d92 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	2b02      	cmp	r3, #2
 8000b1a:	d003      	beq.n	8000b24 <HAL_GPIO_Init+0x38>
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	2b12      	cmp	r3, #18
 8000b22:	d125      	bne.n	8000b70 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8000b24:	693b      	ldr	r3, [r7, #16]
 8000b26:	08da      	lsrs	r2, r3, #3
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	3208      	adds	r2, #8
 8000b2c:	0092      	lsls	r2, r2, #2
 8000b2e:	58d3      	ldr	r3, [r2, r3]
 8000b30:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 8000b32:	693b      	ldr	r3, [r7, #16]
 8000b34:	2207      	movs	r2, #7
 8000b36:	4013      	ands	r3, r2
 8000b38:	009b      	lsls	r3, r3, #2
 8000b3a:	220f      	movs	r2, #15
 8000b3c:	409a      	lsls	r2, r3
 8000b3e:	0013      	movs	r3, r2
 8000b40:	43da      	mvns	r2, r3
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	4013      	ands	r3, r2
 8000b46:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	691b      	ldr	r3, [r3, #16]
 8000b4c:	220f      	movs	r2, #15
 8000b4e:	401a      	ands	r2, r3
 8000b50:	693b      	ldr	r3, [r7, #16]
 8000b52:	2107      	movs	r1, #7
 8000b54:	400b      	ands	r3, r1
 8000b56:	009b      	lsls	r3, r3, #2
 8000b58:	409a      	lsls	r2, r3
 8000b5a:	0013      	movs	r3, r2
 8000b5c:	697a      	ldr	r2, [r7, #20]
 8000b5e:	4313      	orrs	r3, r2
 8000b60:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8000b62:	693b      	ldr	r3, [r7, #16]
 8000b64:	08da      	lsrs	r2, r3, #3
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	3208      	adds	r2, #8
 8000b6a:	0092      	lsls	r2, r2, #2
 8000b6c:	6979      	ldr	r1, [r7, #20]
 8000b6e:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000b76:	693b      	ldr	r3, [r7, #16]
 8000b78:	005b      	lsls	r3, r3, #1
 8000b7a:	2203      	movs	r2, #3
 8000b7c:	409a      	lsls	r2, r3
 8000b7e:	0013      	movs	r3, r2
 8000b80:	43da      	mvns	r2, r3
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	4013      	ands	r3, r2
 8000b86:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	2203      	movs	r2, #3
 8000b8e:	401a      	ands	r2, r3
 8000b90:	693b      	ldr	r3, [r7, #16]
 8000b92:	005b      	lsls	r3, r3, #1
 8000b94:	409a      	lsls	r2, r3
 8000b96:	0013      	movs	r3, r2
 8000b98:	697a      	ldr	r2, [r7, #20]
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	697a      	ldr	r2, [r7, #20]
 8000ba2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	2b01      	cmp	r3, #1
 8000baa:	d00b      	beq.n	8000bc4 <HAL_GPIO_Init+0xd8>
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	2b02      	cmp	r3, #2
 8000bb2:	d007      	beq.n	8000bc4 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bb8:	2b11      	cmp	r3, #17
 8000bba:	d003      	beq.n	8000bc4 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	2b12      	cmp	r3, #18
 8000bc2:	d130      	bne.n	8000c26 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	689b      	ldr	r3, [r3, #8]
 8000bc8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000bca:	693b      	ldr	r3, [r7, #16]
 8000bcc:	005b      	lsls	r3, r3, #1
 8000bce:	2203      	movs	r2, #3
 8000bd0:	409a      	lsls	r2, r3
 8000bd2:	0013      	movs	r3, r2
 8000bd4:	43da      	mvns	r2, r3
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	4013      	ands	r3, r2
 8000bda:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	68da      	ldr	r2, [r3, #12]
 8000be0:	693b      	ldr	r3, [r7, #16]
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	409a      	lsls	r2, r3
 8000be6:	0013      	movs	r3, r2
 8000be8:	697a      	ldr	r2, [r7, #20]
 8000bea:	4313      	orrs	r3, r2
 8000bec:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	697a      	ldr	r2, [r7, #20]
 8000bf2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	693b      	ldr	r3, [r7, #16]
 8000bfe:	409a      	lsls	r2, r3
 8000c00:	0013      	movs	r3, r2
 8000c02:	43da      	mvns	r2, r3
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	4013      	ands	r3, r2
 8000c08:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	091b      	lsrs	r3, r3, #4
 8000c10:	2201      	movs	r2, #1
 8000c12:	401a      	ands	r2, r3
 8000c14:	693b      	ldr	r3, [r7, #16]
 8000c16:	409a      	lsls	r2, r3
 8000c18:	0013      	movs	r3, r2
 8000c1a:	697a      	ldr	r2, [r7, #20]
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	697a      	ldr	r2, [r7, #20]
 8000c24:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	2b03      	cmp	r3, #3
 8000c2c:	d017      	beq.n	8000c5e <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	68db      	ldr	r3, [r3, #12]
 8000c32:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c34:	693b      	ldr	r3, [r7, #16]
 8000c36:	005b      	lsls	r3, r3, #1
 8000c38:	2203      	movs	r2, #3
 8000c3a:	409a      	lsls	r2, r3
 8000c3c:	0013      	movs	r3, r2
 8000c3e:	43da      	mvns	r2, r3
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	4013      	ands	r3, r2
 8000c44:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	689a      	ldr	r2, [r3, #8]
 8000c4a:	693b      	ldr	r3, [r7, #16]
 8000c4c:	005b      	lsls	r3, r3, #1
 8000c4e:	409a      	lsls	r2, r3
 8000c50:	0013      	movs	r3, r2
 8000c52:	697a      	ldr	r2, [r7, #20]
 8000c54:	4313      	orrs	r3, r2
 8000c56:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	697a      	ldr	r2, [r7, #20]
 8000c5c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	685a      	ldr	r2, [r3, #4]
 8000c62:	2380      	movs	r3, #128	; 0x80
 8000c64:	055b      	lsls	r3, r3, #21
 8000c66:	4013      	ands	r3, r2
 8000c68:	d100      	bne.n	8000c6c <HAL_GPIO_Init+0x180>
 8000c6a:	e092      	b.n	8000d92 <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8000c6c:	4a50      	ldr	r2, [pc, #320]	; (8000db0 <HAL_GPIO_Init+0x2c4>)
 8000c6e:	693b      	ldr	r3, [r7, #16]
 8000c70:	089b      	lsrs	r3, r3, #2
 8000c72:	3318      	adds	r3, #24
 8000c74:	009b      	lsls	r3, r3, #2
 8000c76:	589b      	ldr	r3, [r3, r2]
 8000c78:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8000c7a:	693b      	ldr	r3, [r7, #16]
 8000c7c:	2203      	movs	r2, #3
 8000c7e:	4013      	ands	r3, r2
 8000c80:	00db      	lsls	r3, r3, #3
 8000c82:	220f      	movs	r2, #15
 8000c84:	409a      	lsls	r2, r3
 8000c86:	0013      	movs	r3, r2
 8000c88:	43da      	mvns	r2, r3
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8000c90:	687a      	ldr	r2, [r7, #4]
 8000c92:	23a0      	movs	r3, #160	; 0xa0
 8000c94:	05db      	lsls	r3, r3, #23
 8000c96:	429a      	cmp	r2, r3
 8000c98:	d013      	beq.n	8000cc2 <HAL_GPIO_Init+0x1d6>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4a45      	ldr	r2, [pc, #276]	; (8000db4 <HAL_GPIO_Init+0x2c8>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d00d      	beq.n	8000cbe <HAL_GPIO_Init+0x1d2>
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	4a44      	ldr	r2, [pc, #272]	; (8000db8 <HAL_GPIO_Init+0x2cc>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d007      	beq.n	8000cba <HAL_GPIO_Init+0x1ce>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4a43      	ldr	r2, [pc, #268]	; (8000dbc <HAL_GPIO_Init+0x2d0>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d101      	bne.n	8000cb6 <HAL_GPIO_Init+0x1ca>
 8000cb2:	2305      	movs	r3, #5
 8000cb4:	e006      	b.n	8000cc4 <HAL_GPIO_Init+0x1d8>
 8000cb6:	2306      	movs	r3, #6
 8000cb8:	e004      	b.n	8000cc4 <HAL_GPIO_Init+0x1d8>
 8000cba:	2302      	movs	r3, #2
 8000cbc:	e002      	b.n	8000cc4 <HAL_GPIO_Init+0x1d8>
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	e000      	b.n	8000cc4 <HAL_GPIO_Init+0x1d8>
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	693a      	ldr	r2, [r7, #16]
 8000cc6:	2103      	movs	r1, #3
 8000cc8:	400a      	ands	r2, r1
 8000cca:	00d2      	lsls	r2, r2, #3
 8000ccc:	4093      	lsls	r3, r2
 8000cce:	697a      	ldr	r2, [r7, #20]
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8000cd4:	4936      	ldr	r1, [pc, #216]	; (8000db0 <HAL_GPIO_Init+0x2c4>)
 8000cd6:	693b      	ldr	r3, [r7, #16]
 8000cd8:	089b      	lsrs	r3, r3, #2
 8000cda:	3318      	adds	r3, #24
 8000cdc:	009b      	lsls	r3, r3, #2
 8000cde:	697a      	ldr	r2, [r7, #20]
 8000ce0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8000ce2:	4a33      	ldr	r2, [pc, #204]	; (8000db0 <HAL_GPIO_Init+0x2c4>)
 8000ce4:	2380      	movs	r3, #128	; 0x80
 8000ce6:	58d3      	ldr	r3, [r2, r3]
 8000ce8:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	43da      	mvns	r2, r3
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	685a      	ldr	r2, [r3, #4]
 8000cf8:	2380      	movs	r3, #128	; 0x80
 8000cfa:	025b      	lsls	r3, r3, #9
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	d003      	beq.n	8000d08 <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 8000d00:	697a      	ldr	r2, [r7, #20]
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	4313      	orrs	r3, r2
 8000d06:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8000d08:	4929      	ldr	r1, [pc, #164]	; (8000db0 <HAL_GPIO_Init+0x2c4>)
 8000d0a:	2280      	movs	r2, #128	; 0x80
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8000d10:	4a27      	ldr	r2, [pc, #156]	; (8000db0 <HAL_GPIO_Init+0x2c4>)
 8000d12:	2384      	movs	r3, #132	; 0x84
 8000d14:	58d3      	ldr	r3, [r2, r3]
 8000d16:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	43da      	mvns	r2, r3
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	4013      	ands	r3, r2
 8000d20:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	685a      	ldr	r2, [r3, #4]
 8000d26:	2380      	movs	r3, #128	; 0x80
 8000d28:	029b      	lsls	r3, r3, #10
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	d003      	beq.n	8000d36 <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 8000d2e:	697a      	ldr	r2, [r7, #20]
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	4313      	orrs	r3, r2
 8000d34:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8000d36:	491e      	ldr	r1, [pc, #120]	; (8000db0 <HAL_GPIO_Init+0x2c4>)
 8000d38:	2284      	movs	r2, #132	; 0x84
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8000d3e:	4b1c      	ldr	r3, [pc, #112]	; (8000db0 <HAL_GPIO_Init+0x2c4>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	43da      	mvns	r2, r3
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	685a      	ldr	r2, [r3, #4]
 8000d52:	2380      	movs	r3, #128	; 0x80
 8000d54:	035b      	lsls	r3, r3, #13
 8000d56:	4013      	ands	r3, r2
 8000d58:	d003      	beq.n	8000d62 <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 8000d5a:	697a      	ldr	r2, [r7, #20]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8000d62:	4b13      	ldr	r3, [pc, #76]	; (8000db0 <HAL_GPIO_Init+0x2c4>)
 8000d64:	697a      	ldr	r2, [r7, #20]
 8000d66:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8000d68:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <HAL_GPIO_Init+0x2c4>)
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	43da      	mvns	r2, r3
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	4013      	ands	r3, r2
 8000d76:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	685a      	ldr	r2, [r3, #4]
 8000d7c:	2380      	movs	r3, #128	; 0x80
 8000d7e:	039b      	lsls	r3, r3, #14
 8000d80:	4013      	ands	r3, r2
 8000d82:	d003      	beq.n	8000d8c <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 8000d84:	697a      	ldr	r2, [r7, #20]
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8000d8c:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <HAL_GPIO_Init+0x2c4>)
 8000d8e:	697a      	ldr	r2, [r7, #20]
 8000d90:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8000d92:	693b      	ldr	r3, [r7, #16]
 8000d94:	3301      	adds	r3, #1
 8000d96:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	693b      	ldr	r3, [r7, #16]
 8000d9e:	40da      	lsrs	r2, r3
 8000da0:	1e13      	subs	r3, r2, #0
 8000da2:	d000      	beq.n	8000da6 <HAL_GPIO_Init+0x2ba>
 8000da4:	e6aa      	b.n	8000afc <HAL_GPIO_Init+0x10>
  }
}
 8000da6:	46c0      	nop			; (mov r8, r8)
 8000da8:	46c0      	nop			; (mov r8, r8)
 8000daa:	46bd      	mov	sp, r7
 8000dac:	b006      	add	sp, #24
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	40021800 	.word	0x40021800
 8000db4:	50000400 	.word	0x50000400
 8000db8:	50000800 	.word	0x50000800
 8000dbc:	50001400 	.word	0x50001400

08000dc0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	000a      	movs	r2, r1
 8000dca:	1cbb      	adds	r3, r7, #2
 8000dcc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	691b      	ldr	r3, [r3, #16]
 8000dd2:	1cba      	adds	r2, r7, #2
 8000dd4:	8812      	ldrh	r2, [r2, #0]
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	d004      	beq.n	8000de4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8000dda:	230f      	movs	r3, #15
 8000ddc:	18fb      	adds	r3, r7, r3
 8000dde:	2201      	movs	r2, #1
 8000de0:	701a      	strb	r2, [r3, #0]
 8000de2:	e003      	b.n	8000dec <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000de4:	230f      	movs	r3, #15
 8000de6:	18fb      	adds	r3, r7, r3
 8000de8:	2200      	movs	r2, #0
 8000dea:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000dec:	230f      	movs	r3, #15
 8000dee:	18fb      	adds	r3, r7, r3
 8000df0:	781b      	ldrb	r3, [r3, #0]
}
 8000df2:	0018      	movs	r0, r3
 8000df4:	46bd      	mov	sp, r7
 8000df6:	b004      	add	sp, #16
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b082      	sub	sp, #8
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
 8000e02:	0008      	movs	r0, r1
 8000e04:	0011      	movs	r1, r2
 8000e06:	1cbb      	adds	r3, r7, #2
 8000e08:	1c02      	adds	r2, r0, #0
 8000e0a:	801a      	strh	r2, [r3, #0]
 8000e0c:	1c7b      	adds	r3, r7, #1
 8000e0e:	1c0a      	adds	r2, r1, #0
 8000e10:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e12:	1c7b      	adds	r3, r7, #1
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d004      	beq.n	8000e24 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e1a:	1cbb      	adds	r3, r7, #2
 8000e1c:	881a      	ldrh	r2, [r3, #0]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e22:	e003      	b.n	8000e2c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e24:	1cbb      	adds	r3, r7, #2
 8000e26:	881a      	ldrh	r2, [r3, #0]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e2c:	46c0      	nop			; (mov r8, r8)
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	b002      	add	sp, #8
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32C0 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	000a      	movs	r2, r1
 8000e3e:	1cbb      	adds	r3, r7, #2
 8000e40:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	695b      	ldr	r3, [r3, #20]
 8000e46:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e48:	1cbb      	adds	r3, r7, #2
 8000e4a:	881b      	ldrh	r3, [r3, #0]
 8000e4c:	68fa      	ldr	r2, [r7, #12]
 8000e4e:	4013      	ands	r3, r2
 8000e50:	041a      	lsls	r2, r3, #16
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	43db      	mvns	r3, r3
 8000e56:	1cb9      	adds	r1, r7, #2
 8000e58:	8809      	ldrh	r1, [r1, #0]
 8000e5a:	400b      	ands	r3, r1
 8000e5c:	431a      	orrs	r2, r3
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	619a      	str	r2, [r3, #24]
}
 8000e62:	46c0      	nop			; (mov r8, r8)
 8000e64:	46bd      	mov	sp, r7
 8000e66:	b004      	add	sp, #16
 8000e68:	bd80      	pop	{r7, pc}
	...

08000e6c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b086      	sub	sp, #24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d101      	bne.n	8000e7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e1d0      	b.n	8001220 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	2201      	movs	r2, #1
 8000e84:	4013      	ands	r3, r2
 8000e86:	d100      	bne.n	8000e8a <HAL_RCC_OscConfig+0x1e>
 8000e88:	e069      	b.n	8000f5e <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e8a:	4bc8      	ldr	r3, [pc, #800]	; (80011ac <HAL_RCC_OscConfig+0x340>)
 8000e8c:	689b      	ldr	r3, [r3, #8]
 8000e8e:	2238      	movs	r2, #56	; 0x38
 8000e90:	4013      	ands	r3, r2
 8000e92:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	2b08      	cmp	r3, #8
 8000e98:	d105      	bne.n	8000ea6 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d15d      	bne.n	8000f5e <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e1bc      	b.n	8001220 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	685a      	ldr	r2, [r3, #4]
 8000eaa:	2380      	movs	r3, #128	; 0x80
 8000eac:	025b      	lsls	r3, r3, #9
 8000eae:	429a      	cmp	r2, r3
 8000eb0:	d107      	bne.n	8000ec2 <HAL_RCC_OscConfig+0x56>
 8000eb2:	4bbe      	ldr	r3, [pc, #760]	; (80011ac <HAL_RCC_OscConfig+0x340>)
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	4bbd      	ldr	r3, [pc, #756]	; (80011ac <HAL_RCC_OscConfig+0x340>)
 8000eb8:	2180      	movs	r1, #128	; 0x80
 8000eba:	0249      	lsls	r1, r1, #9
 8000ebc:	430a      	orrs	r2, r1
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	e020      	b.n	8000f04 <HAL_RCC_OscConfig+0x98>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	685a      	ldr	r2, [r3, #4]
 8000ec6:	23a0      	movs	r3, #160	; 0xa0
 8000ec8:	02db      	lsls	r3, r3, #11
 8000eca:	429a      	cmp	r2, r3
 8000ecc:	d10e      	bne.n	8000eec <HAL_RCC_OscConfig+0x80>
 8000ece:	4bb7      	ldr	r3, [pc, #732]	; (80011ac <HAL_RCC_OscConfig+0x340>)
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	4bb6      	ldr	r3, [pc, #728]	; (80011ac <HAL_RCC_OscConfig+0x340>)
 8000ed4:	2180      	movs	r1, #128	; 0x80
 8000ed6:	02c9      	lsls	r1, r1, #11
 8000ed8:	430a      	orrs	r2, r1
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	4bb3      	ldr	r3, [pc, #716]	; (80011ac <HAL_RCC_OscConfig+0x340>)
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	4bb2      	ldr	r3, [pc, #712]	; (80011ac <HAL_RCC_OscConfig+0x340>)
 8000ee2:	2180      	movs	r1, #128	; 0x80
 8000ee4:	0249      	lsls	r1, r1, #9
 8000ee6:	430a      	orrs	r2, r1
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	e00b      	b.n	8000f04 <HAL_RCC_OscConfig+0x98>
 8000eec:	4baf      	ldr	r3, [pc, #700]	; (80011ac <HAL_RCC_OscConfig+0x340>)
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	4bae      	ldr	r3, [pc, #696]	; (80011ac <HAL_RCC_OscConfig+0x340>)
 8000ef2:	49af      	ldr	r1, [pc, #700]	; (80011b0 <HAL_RCC_OscConfig+0x344>)
 8000ef4:	400a      	ands	r2, r1
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	4bac      	ldr	r3, [pc, #688]	; (80011ac <HAL_RCC_OscConfig+0x340>)
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	4bab      	ldr	r3, [pc, #684]	; (80011ac <HAL_RCC_OscConfig+0x340>)
 8000efe:	49ad      	ldr	r1, [pc, #692]	; (80011b4 <HAL_RCC_OscConfig+0x348>)
 8000f00:	400a      	ands	r2, r1
 8000f02:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d014      	beq.n	8000f36 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f0c:	f7ff fcfc 	bl	8000908 <HAL_GetTick>
 8000f10:	0003      	movs	r3, r0
 8000f12:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f14:	e008      	b.n	8000f28 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8000f16:	f7ff fcf7 	bl	8000908 <HAL_GetTick>
 8000f1a:	0002      	movs	r2, r0
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	1ad3      	subs	r3, r2, r3
 8000f20:	2b64      	cmp	r3, #100	; 0x64
 8000f22:	d901      	bls.n	8000f28 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8000f24:	2303      	movs	r3, #3
 8000f26:	e17b      	b.n	8001220 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f28:	4ba0      	ldr	r3, [pc, #640]	; (80011ac <HAL_RCC_OscConfig+0x340>)
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	2380      	movs	r3, #128	; 0x80
 8000f2e:	029b      	lsls	r3, r3, #10
 8000f30:	4013      	ands	r3, r2
 8000f32:	d0f0      	beq.n	8000f16 <HAL_RCC_OscConfig+0xaa>
 8000f34:	e013      	b.n	8000f5e <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f36:	f7ff fce7 	bl	8000908 <HAL_GetTick>
 8000f3a:	0003      	movs	r3, r0
 8000f3c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f3e:	e008      	b.n	8000f52 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8000f40:	f7ff fce2 	bl	8000908 <HAL_GetTick>
 8000f44:	0002      	movs	r2, r0
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	2b64      	cmp	r3, #100	; 0x64
 8000f4c:	d901      	bls.n	8000f52 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	e166      	b.n	8001220 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f52:	4b96      	ldr	r3, [pc, #600]	; (80011ac <HAL_RCC_OscConfig+0x340>)
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	2380      	movs	r3, #128	; 0x80
 8000f58:	029b      	lsls	r3, r3, #10
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	d1f0      	bne.n	8000f40 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	2202      	movs	r2, #2
 8000f64:	4013      	ands	r3, r2
 8000f66:	d100      	bne.n	8000f6a <HAL_RCC_OscConfig+0xfe>
 8000f68:	e086      	b.n	8001078 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f6a:	4b90      	ldr	r3, [pc, #576]	; (80011ac <HAL_RCC_OscConfig+0x340>)
 8000f6c:	689b      	ldr	r3, [r3, #8]
 8000f6e:	2238      	movs	r2, #56	; 0x38
 8000f70:	4013      	ands	r3, r2
 8000f72:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d12f      	bne.n	8000fda <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	68db      	ldr	r3, [r3, #12]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d101      	bne.n	8000f86 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
 8000f84:	e14c      	b.n	8001220 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f86:	4b89      	ldr	r3, [pc, #548]	; (80011ac <HAL_RCC_OscConfig+0x340>)
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	4a8b      	ldr	r2, [pc, #556]	; (80011b8 <HAL_RCC_OscConfig+0x34c>)
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	0019      	movs	r1, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	695b      	ldr	r3, [r3, #20]
 8000f94:	021a      	lsls	r2, r3, #8
 8000f96:	4b85      	ldr	r3, [pc, #532]	; (80011ac <HAL_RCC_OscConfig+0x340>)
 8000f98:	430a      	orrs	r2, r1
 8000f9a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d112      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000fa2:	4b82      	ldr	r3, [pc, #520]	; (80011ac <HAL_RCC_OscConfig+0x340>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a85      	ldr	r2, [pc, #532]	; (80011bc <HAL_RCC_OscConfig+0x350>)
 8000fa8:	4013      	ands	r3, r2
 8000faa:	0019      	movs	r1, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	691a      	ldr	r2, [r3, #16]
 8000fb0:	4b7e      	ldr	r3, [pc, #504]	; (80011ac <HAL_RCC_OscConfig+0x340>)
 8000fb2:	430a      	orrs	r2, r1
 8000fb4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8000fb6:	4b7d      	ldr	r3, [pc, #500]	; (80011ac <HAL_RCC_OscConfig+0x340>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	0adb      	lsrs	r3, r3, #11
 8000fbc:	2207      	movs	r2, #7
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	4a7f      	ldr	r2, [pc, #508]	; (80011c0 <HAL_RCC_OscConfig+0x354>)
 8000fc2:	40da      	lsrs	r2, r3
 8000fc4:	4b7f      	ldr	r3, [pc, #508]	; (80011c4 <HAL_RCC_OscConfig+0x358>)
 8000fc6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000fc8:	4b7f      	ldr	r3, [pc, #508]	; (80011c8 <HAL_RCC_OscConfig+0x35c>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	0018      	movs	r0, r3
 8000fce:	f7ff fc3f 	bl	8000850 <HAL_InitTick>
 8000fd2:	1e03      	subs	r3, r0, #0
 8000fd4:	d050      	beq.n	8001078 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e122      	b.n	8001220 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	68db      	ldr	r3, [r3, #12]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d030      	beq.n	8001044 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000fe2:	4b72      	ldr	r3, [pc, #456]	; (80011ac <HAL_RCC_OscConfig+0x340>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a75      	ldr	r2, [pc, #468]	; (80011bc <HAL_RCC_OscConfig+0x350>)
 8000fe8:	4013      	ands	r3, r2
 8000fea:	0019      	movs	r1, r3
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	691a      	ldr	r2, [r3, #16]
 8000ff0:	4b6e      	ldr	r3, [pc, #440]	; (80011ac <HAL_RCC_OscConfig+0x340>)
 8000ff2:	430a      	orrs	r2, r1
 8000ff4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8000ff6:	4b6d      	ldr	r3, [pc, #436]	; (80011ac <HAL_RCC_OscConfig+0x340>)
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	4b6c      	ldr	r3, [pc, #432]	; (80011ac <HAL_RCC_OscConfig+0x340>)
 8000ffc:	2180      	movs	r1, #128	; 0x80
 8000ffe:	0049      	lsls	r1, r1, #1
 8001000:	430a      	orrs	r2, r1
 8001002:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001004:	f7ff fc80 	bl	8000908 <HAL_GetTick>
 8001008:	0003      	movs	r3, r0
 800100a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800100c:	e008      	b.n	8001020 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800100e:	f7ff fc7b 	bl	8000908 <HAL_GetTick>
 8001012:	0002      	movs	r2, r0
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	1ad3      	subs	r3, r2, r3
 8001018:	2b02      	cmp	r3, #2
 800101a:	d901      	bls.n	8001020 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800101c:	2303      	movs	r3, #3
 800101e:	e0ff      	b.n	8001220 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001020:	4b62      	ldr	r3, [pc, #392]	; (80011ac <HAL_RCC_OscConfig+0x340>)
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	2380      	movs	r3, #128	; 0x80
 8001026:	00db      	lsls	r3, r3, #3
 8001028:	4013      	ands	r3, r2
 800102a:	d0f0      	beq.n	800100e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800102c:	4b5f      	ldr	r3, [pc, #380]	; (80011ac <HAL_RCC_OscConfig+0x340>)
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	4a61      	ldr	r2, [pc, #388]	; (80011b8 <HAL_RCC_OscConfig+0x34c>)
 8001032:	4013      	ands	r3, r2
 8001034:	0019      	movs	r1, r3
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	695b      	ldr	r3, [r3, #20]
 800103a:	021a      	lsls	r2, r3, #8
 800103c:	4b5b      	ldr	r3, [pc, #364]	; (80011ac <HAL_RCC_OscConfig+0x340>)
 800103e:	430a      	orrs	r2, r1
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	e019      	b.n	8001078 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8001044:	4b59      	ldr	r3, [pc, #356]	; (80011ac <HAL_RCC_OscConfig+0x340>)
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	4b58      	ldr	r3, [pc, #352]	; (80011ac <HAL_RCC_OscConfig+0x340>)
 800104a:	4960      	ldr	r1, [pc, #384]	; (80011cc <HAL_RCC_OscConfig+0x360>)
 800104c:	400a      	ands	r2, r1
 800104e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001050:	f7ff fc5a 	bl	8000908 <HAL_GetTick>
 8001054:	0003      	movs	r3, r0
 8001056:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001058:	e008      	b.n	800106c <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800105a:	f7ff fc55 	bl	8000908 <HAL_GetTick>
 800105e:	0002      	movs	r2, r0
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	2b02      	cmp	r3, #2
 8001066:	d901      	bls.n	800106c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001068:	2303      	movs	r3, #3
 800106a:	e0d9      	b.n	8001220 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800106c:	4b4f      	ldr	r3, [pc, #316]	; (80011ac <HAL_RCC_OscConfig+0x340>)
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	2380      	movs	r3, #128	; 0x80
 8001072:	00db      	lsls	r3, r3, #3
 8001074:	4013      	ands	r3, r2
 8001076:	d1f0      	bne.n	800105a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2208      	movs	r2, #8
 800107e:	4013      	ands	r3, r2
 8001080:	d042      	beq.n	8001108 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001082:	4b4a      	ldr	r3, [pc, #296]	; (80011ac <HAL_RCC_OscConfig+0x340>)
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	2238      	movs	r2, #56	; 0x38
 8001088:	4013      	ands	r3, r2
 800108a:	2b18      	cmp	r3, #24
 800108c:	d105      	bne.n	800109a <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	699b      	ldr	r3, [r3, #24]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d138      	bne.n	8001108 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e0c2      	b.n	8001220 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	699b      	ldr	r3, [r3, #24]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d019      	beq.n	80010d6 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80010a2:	4b42      	ldr	r3, [pc, #264]	; (80011ac <HAL_RCC_OscConfig+0x340>)
 80010a4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80010a6:	4b41      	ldr	r3, [pc, #260]	; (80011ac <HAL_RCC_OscConfig+0x340>)
 80010a8:	2101      	movs	r1, #1
 80010aa:	430a      	orrs	r2, r1
 80010ac:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010ae:	f7ff fc2b 	bl	8000908 <HAL_GetTick>
 80010b2:	0003      	movs	r3, r0
 80010b4:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80010b6:	e008      	b.n	80010ca <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80010b8:	f7ff fc26 	bl	8000908 <HAL_GetTick>
 80010bc:	0002      	movs	r2, r0
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	2b02      	cmp	r3, #2
 80010c4:	d901      	bls.n	80010ca <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 80010c6:	2303      	movs	r3, #3
 80010c8:	e0aa      	b.n	8001220 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80010ca:	4b38      	ldr	r3, [pc, #224]	; (80011ac <HAL_RCC_OscConfig+0x340>)
 80010cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010ce:	2202      	movs	r2, #2
 80010d0:	4013      	ands	r3, r2
 80010d2:	d0f1      	beq.n	80010b8 <HAL_RCC_OscConfig+0x24c>
 80010d4:	e018      	b.n	8001108 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80010d6:	4b35      	ldr	r3, [pc, #212]	; (80011ac <HAL_RCC_OscConfig+0x340>)
 80010d8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80010da:	4b34      	ldr	r3, [pc, #208]	; (80011ac <HAL_RCC_OscConfig+0x340>)
 80010dc:	2101      	movs	r1, #1
 80010de:	438a      	bics	r2, r1
 80010e0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010e2:	f7ff fc11 	bl	8000908 <HAL_GetTick>
 80010e6:	0003      	movs	r3, r0
 80010e8:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80010ea:	e008      	b.n	80010fe <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80010ec:	f7ff fc0c 	bl	8000908 <HAL_GetTick>
 80010f0:	0002      	movs	r2, r0
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	2b02      	cmp	r3, #2
 80010f8:	d901      	bls.n	80010fe <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 80010fa:	2303      	movs	r3, #3
 80010fc:	e090      	b.n	8001220 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80010fe:	4b2b      	ldr	r3, [pc, #172]	; (80011ac <HAL_RCC_OscConfig+0x340>)
 8001100:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001102:	2202      	movs	r2, #2
 8001104:	4013      	ands	r3, r2
 8001106:	d1f1      	bne.n	80010ec <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2204      	movs	r2, #4
 800110e:	4013      	ands	r3, r2
 8001110:	d100      	bne.n	8001114 <HAL_RCC_OscConfig+0x2a8>
 8001112:	e084      	b.n	800121e <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001114:	230f      	movs	r3, #15
 8001116:	18fb      	adds	r3, r7, r3
 8001118:	2200      	movs	r2, #0
 800111a:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800111c:	4b23      	ldr	r3, [pc, #140]	; (80011ac <HAL_RCC_OscConfig+0x340>)
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	2238      	movs	r2, #56	; 0x38
 8001122:	4013      	ands	r3, r2
 8001124:	2b20      	cmp	r3, #32
 8001126:	d106      	bne.n	8001136 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d000      	beq.n	8001132 <HAL_RCC_OscConfig+0x2c6>
 8001130:	e075      	b.n	800121e <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e074      	b.n	8001220 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	2b01      	cmp	r3, #1
 800113c:	d106      	bne.n	800114c <HAL_RCC_OscConfig+0x2e0>
 800113e:	4b1b      	ldr	r3, [pc, #108]	; (80011ac <HAL_RCC_OscConfig+0x340>)
 8001140:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001142:	4b1a      	ldr	r3, [pc, #104]	; (80011ac <HAL_RCC_OscConfig+0x340>)
 8001144:	2101      	movs	r1, #1
 8001146:	430a      	orrs	r2, r1
 8001148:	65da      	str	r2, [r3, #92]	; 0x5c
 800114a:	e01c      	b.n	8001186 <HAL_RCC_OscConfig+0x31a>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	2b05      	cmp	r3, #5
 8001152:	d10c      	bne.n	800116e <HAL_RCC_OscConfig+0x302>
 8001154:	4b15      	ldr	r3, [pc, #84]	; (80011ac <HAL_RCC_OscConfig+0x340>)
 8001156:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001158:	4b14      	ldr	r3, [pc, #80]	; (80011ac <HAL_RCC_OscConfig+0x340>)
 800115a:	2104      	movs	r1, #4
 800115c:	430a      	orrs	r2, r1
 800115e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001160:	4b12      	ldr	r3, [pc, #72]	; (80011ac <HAL_RCC_OscConfig+0x340>)
 8001162:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001164:	4b11      	ldr	r3, [pc, #68]	; (80011ac <HAL_RCC_OscConfig+0x340>)
 8001166:	2101      	movs	r1, #1
 8001168:	430a      	orrs	r2, r1
 800116a:	65da      	str	r2, [r3, #92]	; 0x5c
 800116c:	e00b      	b.n	8001186 <HAL_RCC_OscConfig+0x31a>
 800116e:	4b0f      	ldr	r3, [pc, #60]	; (80011ac <HAL_RCC_OscConfig+0x340>)
 8001170:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001172:	4b0e      	ldr	r3, [pc, #56]	; (80011ac <HAL_RCC_OscConfig+0x340>)
 8001174:	2101      	movs	r1, #1
 8001176:	438a      	bics	r2, r1
 8001178:	65da      	str	r2, [r3, #92]	; 0x5c
 800117a:	4b0c      	ldr	r3, [pc, #48]	; (80011ac <HAL_RCC_OscConfig+0x340>)
 800117c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800117e:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <HAL_RCC_OscConfig+0x340>)
 8001180:	2104      	movs	r1, #4
 8001182:	438a      	bics	r2, r1
 8001184:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d028      	beq.n	80011e0 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800118e:	f7ff fbbb 	bl	8000908 <HAL_GetTick>
 8001192:	0003      	movs	r3, r0
 8001194:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001196:	e01d      	b.n	80011d4 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001198:	f7ff fbb6 	bl	8000908 <HAL_GetTick>
 800119c:	0002      	movs	r2, r0
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	4a0b      	ldr	r2, [pc, #44]	; (80011d0 <HAL_RCC_OscConfig+0x364>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d915      	bls.n	80011d4 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 80011a8:	2303      	movs	r3, #3
 80011aa:	e039      	b.n	8001220 <HAL_RCC_OscConfig+0x3b4>
 80011ac:	40021000 	.word	0x40021000
 80011b0:	fffeffff 	.word	0xfffeffff
 80011b4:	fffbffff 	.word	0xfffbffff
 80011b8:	ffff80ff 	.word	0xffff80ff
 80011bc:	ffffc7ff 	.word	0xffffc7ff
 80011c0:	02dc6c00 	.word	0x02dc6c00
 80011c4:	20000000 	.word	0x20000000
 80011c8:	20000004 	.word	0x20000004
 80011cc:	fffffeff 	.word	0xfffffeff
 80011d0:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80011d4:	4b14      	ldr	r3, [pc, #80]	; (8001228 <HAL_RCC_OscConfig+0x3bc>)
 80011d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011d8:	2202      	movs	r2, #2
 80011da:	4013      	ands	r3, r2
 80011dc:	d0dc      	beq.n	8001198 <HAL_RCC_OscConfig+0x32c>
 80011de:	e013      	b.n	8001208 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011e0:	f7ff fb92 	bl	8000908 <HAL_GetTick>
 80011e4:	0003      	movs	r3, r0
 80011e6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80011e8:	e009      	b.n	80011fe <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011ea:	f7ff fb8d 	bl	8000908 <HAL_GetTick>
 80011ee:	0002      	movs	r2, r0
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	1ad3      	subs	r3, r2, r3
 80011f4:	4a0d      	ldr	r2, [pc, #52]	; (800122c <HAL_RCC_OscConfig+0x3c0>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d901      	bls.n	80011fe <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 80011fa:	2303      	movs	r3, #3
 80011fc:	e010      	b.n	8001220 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80011fe:	4b0a      	ldr	r3, [pc, #40]	; (8001228 <HAL_RCC_OscConfig+0x3bc>)
 8001200:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001202:	2202      	movs	r2, #2
 8001204:	4013      	ands	r3, r2
 8001206:	d1f0      	bne.n	80011ea <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001208:	230f      	movs	r3, #15
 800120a:	18fb      	adds	r3, r7, r3
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	2b01      	cmp	r3, #1
 8001210:	d105      	bne.n	800121e <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001212:	4b05      	ldr	r3, [pc, #20]	; (8001228 <HAL_RCC_OscConfig+0x3bc>)
 8001214:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001216:	4b04      	ldr	r3, [pc, #16]	; (8001228 <HAL_RCC_OscConfig+0x3bc>)
 8001218:	4905      	ldr	r1, [pc, #20]	; (8001230 <HAL_RCC_OscConfig+0x3c4>)
 800121a:	400a      	ands	r2, r1
 800121c:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
  return HAL_OK;
 800121e:	2300      	movs	r3, #0
}
 8001220:	0018      	movs	r0, r3
 8001222:	46bd      	mov	sp, r7
 8001224:	b006      	add	sp, #24
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40021000 	.word	0x40021000
 800122c:	00001388 	.word	0x00001388
 8001230:	efffffff 	.word	0xefffffff

08001234 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d101      	bne.n	8001248 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001244:	2301      	movs	r3, #1
 8001246:	e0e9      	b.n	800141c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001248:	4b76      	ldr	r3, [pc, #472]	; (8001424 <HAL_RCC_ClockConfig+0x1f0>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2207      	movs	r2, #7
 800124e:	4013      	ands	r3, r2
 8001250:	683a      	ldr	r2, [r7, #0]
 8001252:	429a      	cmp	r2, r3
 8001254:	d91e      	bls.n	8001294 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001256:	4b73      	ldr	r3, [pc, #460]	; (8001424 <HAL_RCC_ClockConfig+0x1f0>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	2207      	movs	r2, #7
 800125c:	4393      	bics	r3, r2
 800125e:	0019      	movs	r1, r3
 8001260:	4b70      	ldr	r3, [pc, #448]	; (8001424 <HAL_RCC_ClockConfig+0x1f0>)
 8001262:	683a      	ldr	r2, [r7, #0]
 8001264:	430a      	orrs	r2, r1
 8001266:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001268:	f7ff fb4e 	bl	8000908 <HAL_GetTick>
 800126c:	0003      	movs	r3, r0
 800126e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001270:	e009      	b.n	8001286 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001272:	f7ff fb49 	bl	8000908 <HAL_GetTick>
 8001276:	0002      	movs	r2, r0
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	4a6a      	ldr	r2, [pc, #424]	; (8001428 <HAL_RCC_ClockConfig+0x1f4>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d901      	bls.n	8001286 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001282:	2303      	movs	r3, #3
 8001284:	e0ca      	b.n	800141c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001286:	4b67      	ldr	r3, [pc, #412]	; (8001424 <HAL_RCC_ClockConfig+0x1f0>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	2207      	movs	r2, #7
 800128c:	4013      	ands	r3, r2
 800128e:	683a      	ldr	r2, [r7, #0]
 8001290:	429a      	cmp	r2, r3
 8001292:	d1ee      	bne.n	8001272 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2202      	movs	r2, #2
 800129a:	4013      	ands	r3, r2
 800129c:	d017      	beq.n	80012ce <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	2204      	movs	r2, #4
 80012a4:	4013      	ands	r3, r2
 80012a6:	d008      	beq.n	80012ba <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80012a8:	4b60      	ldr	r3, [pc, #384]	; (800142c <HAL_RCC_ClockConfig+0x1f8>)
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	4a60      	ldr	r2, [pc, #384]	; (8001430 <HAL_RCC_ClockConfig+0x1fc>)
 80012ae:	401a      	ands	r2, r3
 80012b0:	4b5e      	ldr	r3, [pc, #376]	; (800142c <HAL_RCC_ClockConfig+0x1f8>)
 80012b2:	21b0      	movs	r1, #176	; 0xb0
 80012b4:	0109      	lsls	r1, r1, #4
 80012b6:	430a      	orrs	r2, r1
 80012b8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012ba:	4b5c      	ldr	r3, [pc, #368]	; (800142c <HAL_RCC_ClockConfig+0x1f8>)
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	4a5d      	ldr	r2, [pc, #372]	; (8001434 <HAL_RCC_ClockConfig+0x200>)
 80012c0:	4013      	ands	r3, r2
 80012c2:	0019      	movs	r1, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	68da      	ldr	r2, [r3, #12]
 80012c8:	4b58      	ldr	r3, [pc, #352]	; (800142c <HAL_RCC_ClockConfig+0x1f8>)
 80012ca:	430a      	orrs	r2, r1
 80012cc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2201      	movs	r2, #1
 80012d4:	4013      	ands	r3, r2
 80012d6:	d055      	beq.n	8001384 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 80012d8:	4b54      	ldr	r3, [pc, #336]	; (800142c <HAL_RCC_ClockConfig+0x1f8>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	221c      	movs	r2, #28
 80012de:	4393      	bics	r3, r2
 80012e0:	0019      	movs	r1, r3
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	689a      	ldr	r2, [r3, #8]
 80012e6:	4b51      	ldr	r3, [pc, #324]	; (800142c <HAL_RCC_ClockConfig+0x1f8>)
 80012e8:	430a      	orrs	r2, r1
 80012ea:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d107      	bne.n	8001304 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012f4:	4b4d      	ldr	r3, [pc, #308]	; (800142c <HAL_RCC_ClockConfig+0x1f8>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	2380      	movs	r3, #128	; 0x80
 80012fa:	029b      	lsls	r3, r3, #10
 80012fc:	4013      	ands	r3, r2
 80012fe:	d11f      	bne.n	8001340 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001300:	2301      	movs	r3, #1
 8001302:	e08b      	b.n	800141c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d107      	bne.n	800131c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800130c:	4b47      	ldr	r3, [pc, #284]	; (800142c <HAL_RCC_ClockConfig+0x1f8>)
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	2380      	movs	r3, #128	; 0x80
 8001312:	00db      	lsls	r3, r3, #3
 8001314:	4013      	ands	r3, r2
 8001316:	d113      	bne.n	8001340 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	e07f      	b.n	800141c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	2b03      	cmp	r3, #3
 8001322:	d106      	bne.n	8001332 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001324:	4b41      	ldr	r3, [pc, #260]	; (800142c <HAL_RCC_ClockConfig+0x1f8>)
 8001326:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001328:	2202      	movs	r2, #2
 800132a:	4013      	ands	r3, r2
 800132c:	d108      	bne.n	8001340 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e074      	b.n	800141c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001332:	4b3e      	ldr	r3, [pc, #248]	; (800142c <HAL_RCC_ClockConfig+0x1f8>)
 8001334:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001336:	2202      	movs	r2, #2
 8001338:	4013      	ands	r3, r2
 800133a:	d101      	bne.n	8001340 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800133c:	2301      	movs	r3, #1
 800133e:	e06d      	b.n	800141c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001340:	4b3a      	ldr	r3, [pc, #232]	; (800142c <HAL_RCC_ClockConfig+0x1f8>)
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	2207      	movs	r2, #7
 8001346:	4393      	bics	r3, r2
 8001348:	0019      	movs	r1, r3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	685a      	ldr	r2, [r3, #4]
 800134e:	4b37      	ldr	r3, [pc, #220]	; (800142c <HAL_RCC_ClockConfig+0x1f8>)
 8001350:	430a      	orrs	r2, r1
 8001352:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001354:	f7ff fad8 	bl	8000908 <HAL_GetTick>
 8001358:	0003      	movs	r3, r0
 800135a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800135c:	e009      	b.n	8001372 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800135e:	f7ff fad3 	bl	8000908 <HAL_GetTick>
 8001362:	0002      	movs	r2, r0
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	4a2f      	ldr	r2, [pc, #188]	; (8001428 <HAL_RCC_ClockConfig+0x1f4>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d901      	bls.n	8001372 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e054      	b.n	800141c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001372:	4b2e      	ldr	r3, [pc, #184]	; (800142c <HAL_RCC_ClockConfig+0x1f8>)
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	2238      	movs	r2, #56	; 0x38
 8001378:	401a      	ands	r2, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	00db      	lsls	r3, r3, #3
 8001380:	429a      	cmp	r2, r3
 8001382:	d1ec      	bne.n	800135e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001384:	4b27      	ldr	r3, [pc, #156]	; (8001424 <HAL_RCC_ClockConfig+0x1f0>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2207      	movs	r2, #7
 800138a:	4013      	ands	r3, r2
 800138c:	683a      	ldr	r2, [r7, #0]
 800138e:	429a      	cmp	r2, r3
 8001390:	d21e      	bcs.n	80013d0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001392:	4b24      	ldr	r3, [pc, #144]	; (8001424 <HAL_RCC_ClockConfig+0x1f0>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	2207      	movs	r2, #7
 8001398:	4393      	bics	r3, r2
 800139a:	0019      	movs	r1, r3
 800139c:	4b21      	ldr	r3, [pc, #132]	; (8001424 <HAL_RCC_ClockConfig+0x1f0>)
 800139e:	683a      	ldr	r2, [r7, #0]
 80013a0:	430a      	orrs	r2, r1
 80013a2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80013a4:	f7ff fab0 	bl	8000908 <HAL_GetTick>
 80013a8:	0003      	movs	r3, r0
 80013aa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80013ac:	e009      	b.n	80013c2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80013ae:	f7ff faab 	bl	8000908 <HAL_GetTick>
 80013b2:	0002      	movs	r2, r0
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	4a1b      	ldr	r2, [pc, #108]	; (8001428 <HAL_RCC_ClockConfig+0x1f4>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d901      	bls.n	80013c2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e02c      	b.n	800141c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80013c2:	4b18      	ldr	r3, [pc, #96]	; (8001424 <HAL_RCC_ClockConfig+0x1f0>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	2207      	movs	r2, #7
 80013c8:	4013      	ands	r3, r2
 80013ca:	683a      	ldr	r2, [r7, #0]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d1ee      	bne.n	80013ae <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2204      	movs	r2, #4
 80013d6:	4013      	ands	r3, r2
 80013d8:	d009      	beq.n	80013ee <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80013da:	4b14      	ldr	r3, [pc, #80]	; (800142c <HAL_RCC_ClockConfig+0x1f8>)
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	4a16      	ldr	r2, [pc, #88]	; (8001438 <HAL_RCC_ClockConfig+0x204>)
 80013e0:	4013      	ands	r3, r2
 80013e2:	0019      	movs	r1, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	691a      	ldr	r2, [r3, #16]
 80013e8:	4b10      	ldr	r3, [pc, #64]	; (800142c <HAL_RCC_ClockConfig+0x1f8>)
 80013ea:	430a      	orrs	r2, r1
 80013ec:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80013ee:	f000 f82b 	bl	8001448 <HAL_RCC_GetSysClockFreq>
 80013f2:	0001      	movs	r1, r0
 80013f4:	4b0d      	ldr	r3, [pc, #52]	; (800142c <HAL_RCC_ClockConfig+0x1f8>)
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	0a1b      	lsrs	r3, r3, #8
 80013fa:	220f      	movs	r2, #15
 80013fc:	401a      	ands	r2, r3
 80013fe:	4b0f      	ldr	r3, [pc, #60]	; (800143c <HAL_RCC_ClockConfig+0x208>)
 8001400:	0092      	lsls	r2, r2, #2
 8001402:	58d3      	ldr	r3, [r2, r3]
 8001404:	221f      	movs	r2, #31
 8001406:	4013      	ands	r3, r2
 8001408:	000a      	movs	r2, r1
 800140a:	40da      	lsrs	r2, r3
 800140c:	4b0c      	ldr	r3, [pc, #48]	; (8001440 <HAL_RCC_ClockConfig+0x20c>)
 800140e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001410:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <HAL_RCC_ClockConfig+0x210>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	0018      	movs	r0, r3
 8001416:	f7ff fa1b 	bl	8000850 <HAL_InitTick>
 800141a:	0003      	movs	r3, r0
}
 800141c:	0018      	movs	r0, r3
 800141e:	46bd      	mov	sp, r7
 8001420:	b004      	add	sp, #16
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40022000 	.word	0x40022000
 8001428:	00001388 	.word	0x00001388
 800142c:	40021000 	.word	0x40021000
 8001430:	ffff84ff 	.word	0xffff84ff
 8001434:	fffff0ff 	.word	0xfffff0ff
 8001438:	ffff8fff 	.word	0xffff8fff
 800143c:	0800232c 	.word	0x0800232c
 8001440:	20000000 	.word	0x20000000
 8001444:	20000004 	.word	0x20000004

08001448 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800144e:	4b1c      	ldr	r3, [pc, #112]	; (80014c0 <HAL_RCC_GetSysClockFreq+0x78>)
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	2238      	movs	r2, #56	; 0x38
 8001454:	4013      	ands	r3, r2
 8001456:	d10f      	bne.n	8001478 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001458:	4b19      	ldr	r3, [pc, #100]	; (80014c0 <HAL_RCC_GetSysClockFreq+0x78>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	0adb      	lsrs	r3, r3, #11
 800145e:	2207      	movs	r2, #7
 8001460:	4013      	ands	r3, r2
 8001462:	2201      	movs	r2, #1
 8001464:	409a      	lsls	r2, r3
 8001466:	0013      	movs	r3, r2
 8001468:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800146a:	6839      	ldr	r1, [r7, #0]
 800146c:	4815      	ldr	r0, [pc, #84]	; (80014c4 <HAL_RCC_GetSysClockFreq+0x7c>)
 800146e:	f7fe fe4b 	bl	8000108 <__udivsi3>
 8001472:	0003      	movs	r3, r0
 8001474:	607b      	str	r3, [r7, #4]
 8001476:	e01e      	b.n	80014b6 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001478:	4b11      	ldr	r3, [pc, #68]	; (80014c0 <HAL_RCC_GetSysClockFreq+0x78>)
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	2238      	movs	r2, #56	; 0x38
 800147e:	4013      	ands	r3, r2
 8001480:	2b08      	cmp	r3, #8
 8001482:	d102      	bne.n	800148a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001484:	4b10      	ldr	r3, [pc, #64]	; (80014c8 <HAL_RCC_GetSysClockFreq+0x80>)
 8001486:	607b      	str	r3, [r7, #4]
 8001488:	e015      	b.n	80014b6 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800148a:	4b0d      	ldr	r3, [pc, #52]	; (80014c0 <HAL_RCC_GetSysClockFreq+0x78>)
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	2238      	movs	r2, #56	; 0x38
 8001490:	4013      	ands	r3, r2
 8001492:	2b20      	cmp	r3, #32
 8001494:	d103      	bne.n	800149e <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001496:	2380      	movs	r3, #128	; 0x80
 8001498:	021b      	lsls	r3, r3, #8
 800149a:	607b      	str	r3, [r7, #4]
 800149c:	e00b      	b.n	80014b6 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800149e:	4b08      	ldr	r3, [pc, #32]	; (80014c0 <HAL_RCC_GetSysClockFreq+0x78>)
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	2238      	movs	r2, #56	; 0x38
 80014a4:	4013      	ands	r3, r2
 80014a6:	2b18      	cmp	r3, #24
 80014a8:	d103      	bne.n	80014b2 <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80014aa:	23fa      	movs	r3, #250	; 0xfa
 80014ac:	01db      	lsls	r3, r3, #7
 80014ae:	607b      	str	r3, [r7, #4]
 80014b0:	e001      	b.n	80014b6 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 80014b2:	2300      	movs	r3, #0
 80014b4:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 80014b6:	687b      	ldr	r3, [r7, #4]
}
 80014b8:	0018      	movs	r0, r3
 80014ba:	46bd      	mov	sp, r7
 80014bc:	b002      	add	sp, #8
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	40021000 	.word	0x40021000
 80014c4:	02dc6c00 	.word	0x02dc6c00
 80014c8:	007a1200 	.word	0x007a1200

080014cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014d0:	4b02      	ldr	r3, [pc, #8]	; (80014dc <HAL_RCC_GetHCLKFreq+0x10>)
 80014d2:	681b      	ldr	r3, [r3, #0]
}
 80014d4:	0018      	movs	r0, r3
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	46c0      	nop			; (mov r8, r8)
 80014dc:	20000000 	.word	0x20000000

080014e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 80014e4:	f7ff fff2 	bl	80014cc <HAL_RCC_GetHCLKFreq>
 80014e8:	0001      	movs	r1, r0
 80014ea:	4b07      	ldr	r3, [pc, #28]	; (8001508 <HAL_RCC_GetPCLK1Freq+0x28>)
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	0b1b      	lsrs	r3, r3, #12
 80014f0:	2207      	movs	r2, #7
 80014f2:	401a      	ands	r2, r3
 80014f4:	4b05      	ldr	r3, [pc, #20]	; (800150c <HAL_RCC_GetPCLK1Freq+0x2c>)
 80014f6:	0092      	lsls	r2, r2, #2
 80014f8:	58d3      	ldr	r3, [r2, r3]
 80014fa:	221f      	movs	r2, #31
 80014fc:	4013      	ands	r3, r2
 80014fe:	40d9      	lsrs	r1, r3
 8001500:	000b      	movs	r3, r1
}
 8001502:	0018      	movs	r0, r3
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	40021000 	.word	0x40021000
 800150c:	0800236c 	.word	0x0800236c

08001510 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to RTC domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001518:	2313      	movs	r3, #19
 800151a:	18fb      	adds	r3, r7, r3
 800151c:	2200      	movs	r2, #0
 800151e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001520:	2312      	movs	r3, #18
 8001522:	18fb      	adds	r3, r7, r3
 8001524:	2200      	movs	r2, #0
 8001526:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	2380      	movs	r3, #128	; 0x80
 800152e:	029b      	lsls	r3, r3, #10
 8001530:	4013      	ands	r3, r2
 8001532:	d100      	bne.n	8001536 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001534:	e079      	b.n	800162a <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001536:	2011      	movs	r0, #17
 8001538:	183b      	adds	r3, r7, r0
 800153a:	2200      	movs	r2, #0
 800153c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800153e:	4b64      	ldr	r3, [pc, #400]	; (80016d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001540:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001542:	2380      	movs	r3, #128	; 0x80
 8001544:	055b      	lsls	r3, r3, #21
 8001546:	4013      	ands	r3, r2
 8001548:	d110      	bne.n	800156c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800154a:	4b61      	ldr	r3, [pc, #388]	; (80016d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800154c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800154e:	4b60      	ldr	r3, [pc, #384]	; (80016d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001550:	2180      	movs	r1, #128	; 0x80
 8001552:	0549      	lsls	r1, r1, #21
 8001554:	430a      	orrs	r2, r1
 8001556:	63da      	str	r2, [r3, #60]	; 0x3c
 8001558:	4b5d      	ldr	r3, [pc, #372]	; (80016d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800155a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800155c:	2380      	movs	r3, #128	; 0x80
 800155e:	055b      	lsls	r3, r3, #21
 8001560:	4013      	ands	r3, r2
 8001562:	60bb      	str	r3, [r7, #8]
 8001564:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001566:	183b      	adds	r3, r7, r0
 8001568:	2201      	movs	r2, #1
 800156a:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 800156c:	4b58      	ldr	r3, [pc, #352]	; (80016d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800156e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001570:	23c0      	movs	r3, #192	; 0xc0
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	4013      	ands	r3, r2
 8001576:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d019      	beq.n	80015b2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	699b      	ldr	r3, [r3, #24]
 8001582:	697a      	ldr	r2, [r7, #20]
 8001584:	429a      	cmp	r2, r3
 8001586:	d014      	beq.n	80015b2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8001588:	4b51      	ldr	r3, [pc, #324]	; (80016d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800158a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800158c:	4a51      	ldr	r2, [pc, #324]	; (80016d4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800158e:	4013      	ands	r3, r2
 8001590:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001592:	4b4f      	ldr	r3, [pc, #316]	; (80016d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001594:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001596:	4b4e      	ldr	r3, [pc, #312]	; (80016d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001598:	2180      	movs	r1, #128	; 0x80
 800159a:	0249      	lsls	r1, r1, #9
 800159c:	430a      	orrs	r2, r1
 800159e:	65da      	str	r2, [r3, #92]	; 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 80015a0:	4b4b      	ldr	r3, [pc, #300]	; (80016d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80015a2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80015a4:	4b4a      	ldr	r3, [pc, #296]	; (80016d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80015a6:	494c      	ldr	r1, [pc, #304]	; (80016d8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80015a8:	400a      	ands	r2, r1
 80015aa:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 80015ac:	4b48      	ldr	r3, [pc, #288]	; (80016d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80015ae:	697a      	ldr	r2, [r7, #20]
 80015b0:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	2201      	movs	r2, #1
 80015b6:	4013      	ands	r3, r2
 80015b8:	d016      	beq.n	80015e8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ba:	f7ff f9a5 	bl	8000908 <HAL_GetTick>
 80015be:	0003      	movs	r3, r0
 80015c0:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80015c2:	e00c      	b.n	80015de <HAL_RCCEx_PeriphCLKConfig+0xce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015c4:	f7ff f9a0 	bl	8000908 <HAL_GetTick>
 80015c8:	0002      	movs	r2, r0
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	4a43      	ldr	r2, [pc, #268]	; (80016dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d904      	bls.n	80015de <HAL_RCCEx_PeriphCLKConfig+0xce>
        {
          ret = HAL_TIMEOUT;
 80015d4:	2313      	movs	r3, #19
 80015d6:	18fb      	adds	r3, r7, r3
 80015d8:	2203      	movs	r2, #3
 80015da:	701a      	strb	r2, [r3, #0]
          break;
 80015dc:	e004      	b.n	80015e8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80015de:	4b3c      	ldr	r3, [pc, #240]	; (80016d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80015e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015e2:	2202      	movs	r2, #2
 80015e4:	4013      	ands	r3, r2
 80015e6:	d0ed      	beq.n	80015c4 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }

    if (ret == HAL_OK)
 80015e8:	2313      	movs	r3, #19
 80015ea:	18fb      	adds	r3, r7, r3
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d10a      	bne.n	8001608 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80015f2:	4b37      	ldr	r3, [pc, #220]	; (80016d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80015f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015f6:	4a37      	ldr	r2, [pc, #220]	; (80016d4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80015f8:	4013      	ands	r3, r2
 80015fa:	0019      	movs	r1, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	699a      	ldr	r2, [r3, #24]
 8001600:	4b33      	ldr	r3, [pc, #204]	; (80016d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001602:	430a      	orrs	r2, r1
 8001604:	65da      	str	r2, [r3, #92]	; 0x5c
 8001606:	e005      	b.n	8001614 <HAL_RCCEx_PeriphCLKConfig+0x104>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001608:	2312      	movs	r3, #18
 800160a:	18fb      	adds	r3, r7, r3
 800160c:	2213      	movs	r2, #19
 800160e:	18ba      	adds	r2, r7, r2
 8001610:	7812      	ldrb	r2, [r2, #0]
 8001612:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001614:	2311      	movs	r3, #17
 8001616:	18fb      	adds	r3, r7, r3
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	2b01      	cmp	r3, #1
 800161c:	d105      	bne.n	800162a <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800161e:	4b2c      	ldr	r3, [pc, #176]	; (80016d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001620:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001622:	4b2b      	ldr	r3, [pc, #172]	; (80016d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001624:	492e      	ldr	r1, [pc, #184]	; (80016e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001626:	400a      	ands	r2, r1
 8001628:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	2201      	movs	r2, #1
 8001630:	4013      	ands	r3, r2
 8001632:	d009      	beq.n	8001648 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001634:	4b26      	ldr	r3, [pc, #152]	; (80016d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001638:	2203      	movs	r2, #3
 800163a:	4393      	bics	r3, r2
 800163c:	0019      	movs	r1, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	689a      	ldr	r2, [r3, #8]
 8001642:	4b23      	ldr	r3, [pc, #140]	; (80016d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001644:	430a      	orrs	r2, r1
 8001646:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2240      	movs	r2, #64	; 0x40
 800164e:	4013      	ands	r3, r2
 8001650:	d009      	beq.n	8001666 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001652:	4b1f      	ldr	r3, [pc, #124]	; (80016d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001656:	4a23      	ldr	r2, [pc, #140]	; (80016e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001658:	4013      	ands	r3, r2
 800165a:	0019      	movs	r1, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	68da      	ldr	r2, [r3, #12]
 8001660:	4b1b      	ldr	r3, [pc, #108]	; (80016d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001662:	430a      	orrs	r2, r1
 8001664:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	2380      	movs	r3, #128	; 0x80
 800166c:	01db      	lsls	r3, r3, #7
 800166e:	4013      	ands	r3, r2
 8001670:	d008      	beq.n	8001684 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001672:	4b17      	ldr	r3, [pc, #92]	; (80016d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	0899      	lsrs	r1, r3, #2
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	695a      	ldr	r2, [r3, #20]
 800167e:	4b14      	ldr	r3, [pc, #80]	; (80016d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001680:	430a      	orrs	r2, r1
 8001682:	655a      	str	r2, [r3, #84]	; 0x54

  }

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	2380      	movs	r3, #128	; 0x80
 800168a:	011b      	lsls	r3, r3, #4
 800168c:	4013      	ands	r3, r2
 800168e:	d009      	beq.n	80016a4 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001690:	4b0f      	ldr	r3, [pc, #60]	; (80016d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001694:	4a14      	ldr	r2, [pc, #80]	; (80016e8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001696:	4013      	ands	r3, r2
 8001698:	0019      	movs	r1, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	691a      	ldr	r2, [r3, #16]
 800169e:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80016a0:	430a      	orrs	r2, r1
 80016a2:	655a      	str	r2, [r3, #84]	; 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	da09      	bge.n	80016c0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 80016ac:	4b08      	ldr	r3, [pc, #32]	; (80016d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	22e0      	movs	r2, #224	; 0xe0
 80016b2:	4393      	bics	r3, r2
 80016b4:	0019      	movs	r1, r3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685a      	ldr	r2, [r3, #4]
 80016ba:	4b05      	ldr	r3, [pc, #20]	; (80016d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80016bc:	430a      	orrs	r2, r1
 80016be:	601a      	str	r2, [r3, #0]
  }
  return status;
 80016c0:	2312      	movs	r3, #18
 80016c2:	18fb      	adds	r3, r7, r3
 80016c4:	781b      	ldrb	r3, [r3, #0]
}
 80016c6:	0018      	movs	r0, r3
 80016c8:	46bd      	mov	sp, r7
 80016ca:	b006      	add	sp, #24
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	46c0      	nop			; (mov r8, r8)
 80016d0:	40021000 	.word	0x40021000
 80016d4:	fffffcff 	.word	0xfffffcff
 80016d8:	fffeffff 	.word	0xfffeffff
 80016dc:	00001388 	.word	0x00001388
 80016e0:	efffffff 	.word	0xefffffff
 80016e4:	ffffcfff 	.word	0xffffcfff
 80016e8:	ffff3fff 	.word	0xffff3fff

080016ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d101      	bne.n	80016fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e046      	b.n	800178c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2288      	movs	r2, #136	; 0x88
 8001702:	589b      	ldr	r3, [r3, r2]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d107      	bne.n	8001718 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2284      	movs	r2, #132	; 0x84
 800170c:	2100      	movs	r1, #0
 800170e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	0018      	movs	r0, r3
 8001714:	f7fe fffa 	bl	800070c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2288      	movs	r2, #136	; 0x88
 800171c:	2124      	movs	r1, #36	; 0x24
 800171e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	2101      	movs	r1, #1
 800172c:	438a      	bics	r2, r1
 800172e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001734:	2b00      	cmp	r3, #0
 8001736:	d003      	beq.n	8001740 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	0018      	movs	r0, r3
 800173c:	f000 fa4e 	bl	8001bdc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	0018      	movs	r0, r3
 8001744:	f000 f8cc 	bl	80018e0 <UART_SetConfig>
 8001748:	0003      	movs	r3, r0
 800174a:	2b01      	cmp	r3, #1
 800174c:	d101      	bne.n	8001752 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e01c      	b.n	800178c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	685a      	ldr	r2, [r3, #4]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	490d      	ldr	r1, [pc, #52]	; (8001794 <HAL_UART_Init+0xa8>)
 800175e:	400a      	ands	r2, r1
 8001760:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	689a      	ldr	r2, [r3, #8]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	212a      	movs	r1, #42	; 0x2a
 800176e:	438a      	bics	r2, r1
 8001770:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2101      	movs	r1, #1
 800177e:	430a      	orrs	r2, r1
 8001780:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	0018      	movs	r0, r3
 8001786:	f000 fadd 	bl	8001d44 <UART_CheckIdleState>
 800178a:	0003      	movs	r3, r0
}
 800178c:	0018      	movs	r0, r3
 800178e:	46bd      	mov	sp, r7
 8001790:	b002      	add	sp, #8
 8001792:	bd80      	pop	{r7, pc}
 8001794:	ffffb7ff 	.word	0xffffb7ff

08001798 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b08a      	sub	sp, #40	; 0x28
 800179c:	af02      	add	r7, sp, #8
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	603b      	str	r3, [r7, #0]
 80017a4:	1dbb      	adds	r3, r7, #6
 80017a6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	2288      	movs	r2, #136	; 0x88
 80017ac:	589b      	ldr	r3, [r3, r2]
 80017ae:	2b20      	cmp	r3, #32
 80017b0:	d000      	beq.n	80017b4 <HAL_UART_Transmit+0x1c>
 80017b2:	e090      	b.n	80018d6 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d003      	beq.n	80017c2 <HAL_UART_Transmit+0x2a>
 80017ba:	1dbb      	adds	r3, r7, #6
 80017bc:	881b      	ldrh	r3, [r3, #0]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d101      	bne.n	80017c6 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e088      	b.n	80018d8 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	689a      	ldr	r2, [r3, #8]
 80017ca:	2380      	movs	r3, #128	; 0x80
 80017cc:	015b      	lsls	r3, r3, #5
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d109      	bne.n	80017e6 <HAL_UART_Transmit+0x4e>
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	691b      	ldr	r3, [r3, #16]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d105      	bne.n	80017e6 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	2201      	movs	r2, #1
 80017de:	4013      	ands	r3, r2
 80017e0:	d001      	beq.n	80017e6 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e078      	b.n	80018d8 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	2290      	movs	r2, #144	; 0x90
 80017ea:	2100      	movs	r1, #0
 80017ec:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	2288      	movs	r2, #136	; 0x88
 80017f2:	2121      	movs	r1, #33	; 0x21
 80017f4:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80017f6:	f7ff f887 	bl	8000908 <HAL_GetTick>
 80017fa:	0003      	movs	r3, r0
 80017fc:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	1dba      	adds	r2, r7, #6
 8001802:	2154      	movs	r1, #84	; 0x54
 8001804:	8812      	ldrh	r2, [r2, #0]
 8001806:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	1dba      	adds	r2, r7, #6
 800180c:	2156      	movs	r1, #86	; 0x56
 800180e:	8812      	ldrh	r2, [r2, #0]
 8001810:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	689a      	ldr	r2, [r3, #8]
 8001816:	2380      	movs	r3, #128	; 0x80
 8001818:	015b      	lsls	r3, r3, #5
 800181a:	429a      	cmp	r2, r3
 800181c:	d108      	bne.n	8001830 <HAL_UART_Transmit+0x98>
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	691b      	ldr	r3, [r3, #16]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d104      	bne.n	8001830 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8001826:	2300      	movs	r3, #0
 8001828:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	61bb      	str	r3, [r7, #24]
 800182e:	e003      	b.n	8001838 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001834:	2300      	movs	r3, #0
 8001836:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001838:	e030      	b.n	800189c <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800183a:	697a      	ldr	r2, [r7, #20]
 800183c:	68f8      	ldr	r0, [r7, #12]
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	9300      	str	r3, [sp, #0]
 8001842:	0013      	movs	r3, r2
 8001844:	2200      	movs	r2, #0
 8001846:	2180      	movs	r1, #128	; 0x80
 8001848:	f000 fb26 	bl	8001e98 <UART_WaitOnFlagUntilTimeout>
 800184c:	1e03      	subs	r3, r0, #0
 800184e:	d005      	beq.n	800185c <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	2288      	movs	r2, #136	; 0x88
 8001854:	2120      	movs	r1, #32
 8001856:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001858:	2303      	movs	r3, #3
 800185a:	e03d      	b.n	80018d8 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d10b      	bne.n	800187a <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	881b      	ldrh	r3, [r3, #0]
 8001866:	001a      	movs	r2, r3
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	05d2      	lsls	r2, r2, #23
 800186e:	0dd2      	lsrs	r2, r2, #23
 8001870:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	3302      	adds	r3, #2
 8001876:	61bb      	str	r3, [r7, #24]
 8001878:	e007      	b.n	800188a <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	781a      	ldrb	r2, [r3, #0]
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	3301      	adds	r3, #1
 8001888:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2256      	movs	r2, #86	; 0x56
 800188e:	5a9b      	ldrh	r3, [r3, r2]
 8001890:	b29b      	uxth	r3, r3
 8001892:	3b01      	subs	r3, #1
 8001894:	b299      	uxth	r1, r3
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	2256      	movs	r2, #86	; 0x56
 800189a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2256      	movs	r2, #86	; 0x56
 80018a0:	5a9b      	ldrh	r3, [r3, r2]
 80018a2:	b29b      	uxth	r3, r3
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d1c8      	bne.n	800183a <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80018a8:	697a      	ldr	r2, [r7, #20]
 80018aa:	68f8      	ldr	r0, [r7, #12]
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	9300      	str	r3, [sp, #0]
 80018b0:	0013      	movs	r3, r2
 80018b2:	2200      	movs	r2, #0
 80018b4:	2140      	movs	r1, #64	; 0x40
 80018b6:	f000 faef 	bl	8001e98 <UART_WaitOnFlagUntilTimeout>
 80018ba:	1e03      	subs	r3, r0, #0
 80018bc:	d005      	beq.n	80018ca <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	2288      	movs	r2, #136	; 0x88
 80018c2:	2120      	movs	r1, #32
 80018c4:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e006      	b.n	80018d8 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	2288      	movs	r2, #136	; 0x88
 80018ce:	2120      	movs	r1, #32
 80018d0:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80018d2:	2300      	movs	r3, #0
 80018d4:	e000      	b.n	80018d8 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 80018d6:	2302      	movs	r3, #2
  }
}
 80018d8:	0018      	movs	r0, r3
 80018da:	46bd      	mov	sp, r7
 80018dc:	b008      	add	sp, #32
 80018de:	bd80      	pop	{r7, pc}

080018e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b088      	sub	sp, #32
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80018e8:	231e      	movs	r3, #30
 80018ea:	18fb      	adds	r3, r7, r3
 80018ec:	2200      	movs	r2, #0
 80018ee:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689a      	ldr	r2, [r3, #8]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	691b      	ldr	r3, [r3, #16]
 80018f8:	431a      	orrs	r2, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	695b      	ldr	r3, [r3, #20]
 80018fe:	431a      	orrs	r2, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	69db      	ldr	r3, [r3, #28]
 8001904:	4313      	orrs	r3, r2
 8001906:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4aab      	ldr	r2, [pc, #684]	; (8001bbc <UART_SetConfig+0x2dc>)
 8001910:	4013      	ands	r3, r2
 8001912:	0019      	movs	r1, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	697a      	ldr	r2, [r7, #20]
 800191a:	430a      	orrs	r2, r1
 800191c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	4aa6      	ldr	r2, [pc, #664]	; (8001bc0 <UART_SetConfig+0x2e0>)
 8001926:	4013      	ands	r3, r2
 8001928:	0019      	movs	r1, r3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	68da      	ldr	r2, [r3, #12]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	430a      	orrs	r2, r1
 8001934:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	699b      	ldr	r3, [r3, #24]
 800193a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6a1b      	ldr	r3, [r3, #32]
 8001940:	697a      	ldr	r2, [r7, #20]
 8001942:	4313      	orrs	r3, r2
 8001944:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	4a9d      	ldr	r2, [pc, #628]	; (8001bc4 <UART_SetConfig+0x2e4>)
 800194e:	4013      	ands	r3, r2
 8001950:	0019      	movs	r1, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	697a      	ldr	r2, [r7, #20]
 8001958:	430a      	orrs	r2, r1
 800195a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001962:	220f      	movs	r2, #15
 8001964:	4393      	bics	r3, r2
 8001966:	0019      	movs	r1, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	430a      	orrs	r2, r1
 8001972:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a93      	ldr	r2, [pc, #588]	; (8001bc8 <UART_SetConfig+0x2e8>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d127      	bne.n	80019ce <UART_SetConfig+0xee>
 800197e:	4b93      	ldr	r3, [pc, #588]	; (8001bcc <UART_SetConfig+0x2ec>)
 8001980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001982:	2203      	movs	r2, #3
 8001984:	4013      	ands	r3, r2
 8001986:	2b03      	cmp	r3, #3
 8001988:	d017      	beq.n	80019ba <UART_SetConfig+0xda>
 800198a:	d81b      	bhi.n	80019c4 <UART_SetConfig+0xe4>
 800198c:	2b02      	cmp	r3, #2
 800198e:	d00a      	beq.n	80019a6 <UART_SetConfig+0xc6>
 8001990:	d818      	bhi.n	80019c4 <UART_SetConfig+0xe4>
 8001992:	2b00      	cmp	r3, #0
 8001994:	d002      	beq.n	800199c <UART_SetConfig+0xbc>
 8001996:	2b01      	cmp	r3, #1
 8001998:	d00a      	beq.n	80019b0 <UART_SetConfig+0xd0>
 800199a:	e013      	b.n	80019c4 <UART_SetConfig+0xe4>
 800199c:	231f      	movs	r3, #31
 800199e:	18fb      	adds	r3, r7, r3
 80019a0:	2200      	movs	r2, #0
 80019a2:	701a      	strb	r2, [r3, #0]
 80019a4:	e021      	b.n	80019ea <UART_SetConfig+0x10a>
 80019a6:	231f      	movs	r3, #31
 80019a8:	18fb      	adds	r3, r7, r3
 80019aa:	2202      	movs	r2, #2
 80019ac:	701a      	strb	r2, [r3, #0]
 80019ae:	e01c      	b.n	80019ea <UART_SetConfig+0x10a>
 80019b0:	231f      	movs	r3, #31
 80019b2:	18fb      	adds	r3, r7, r3
 80019b4:	2204      	movs	r2, #4
 80019b6:	701a      	strb	r2, [r3, #0]
 80019b8:	e017      	b.n	80019ea <UART_SetConfig+0x10a>
 80019ba:	231f      	movs	r3, #31
 80019bc:	18fb      	adds	r3, r7, r3
 80019be:	2208      	movs	r2, #8
 80019c0:	701a      	strb	r2, [r3, #0]
 80019c2:	e012      	b.n	80019ea <UART_SetConfig+0x10a>
 80019c4:	231f      	movs	r3, #31
 80019c6:	18fb      	adds	r3, r7, r3
 80019c8:	2210      	movs	r2, #16
 80019ca:	701a      	strb	r2, [r3, #0]
 80019cc:	e00d      	b.n	80019ea <UART_SetConfig+0x10a>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a7f      	ldr	r2, [pc, #508]	; (8001bd0 <UART_SetConfig+0x2f0>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d104      	bne.n	80019e2 <UART_SetConfig+0x102>
 80019d8:	231f      	movs	r3, #31
 80019da:	18fb      	adds	r3, r7, r3
 80019dc:	2200      	movs	r2, #0
 80019de:	701a      	strb	r2, [r3, #0]
 80019e0:	e003      	b.n	80019ea <UART_SetConfig+0x10a>
 80019e2:	231f      	movs	r3, #31
 80019e4:	18fb      	adds	r3, r7, r3
 80019e6:	2210      	movs	r2, #16
 80019e8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	69da      	ldr	r2, [r3, #28]
 80019ee:	2380      	movs	r3, #128	; 0x80
 80019f0:	021b      	lsls	r3, r3, #8
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d000      	beq.n	80019f8 <UART_SetConfig+0x118>
 80019f6:	e06f      	b.n	8001ad8 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 80019f8:	231f      	movs	r3, #31
 80019fa:	18fb      	adds	r3, r7, r3
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	2b08      	cmp	r3, #8
 8001a00:	d01f      	beq.n	8001a42 <UART_SetConfig+0x162>
 8001a02:	dc22      	bgt.n	8001a4a <UART_SetConfig+0x16a>
 8001a04:	2b04      	cmp	r3, #4
 8001a06:	d017      	beq.n	8001a38 <UART_SetConfig+0x158>
 8001a08:	dc1f      	bgt.n	8001a4a <UART_SetConfig+0x16a>
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d002      	beq.n	8001a14 <UART_SetConfig+0x134>
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d005      	beq.n	8001a1e <UART_SetConfig+0x13e>
 8001a12:	e01a      	b.n	8001a4a <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001a14:	f7ff fd64 	bl	80014e0 <HAL_RCC_GetPCLK1Freq>
 8001a18:	0003      	movs	r3, r0
 8001a1a:	61bb      	str	r3, [r7, #24]
        break;
 8001a1c:	e01c      	b.n	8001a58 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8001a1e:	4b6b      	ldr	r3, [pc, #428]	; (8001bcc <UART_SetConfig+0x2ec>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	095b      	lsrs	r3, r3, #5
 8001a24:	2207      	movs	r2, #7
 8001a26:	4013      	ands	r3, r2
 8001a28:	3301      	adds	r3, #1
 8001a2a:	0019      	movs	r1, r3
 8001a2c:	4869      	ldr	r0, [pc, #420]	; (8001bd4 <UART_SetConfig+0x2f4>)
 8001a2e:	f7fe fb6b 	bl	8000108 <__udivsi3>
 8001a32:	0003      	movs	r3, r0
 8001a34:	61bb      	str	r3, [r7, #24]
        break;
 8001a36:	e00f      	b.n	8001a58 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001a38:	f7ff fd06 	bl	8001448 <HAL_RCC_GetSysClockFreq>
 8001a3c:	0003      	movs	r3, r0
 8001a3e:	61bb      	str	r3, [r7, #24]
        break;
 8001a40:	e00a      	b.n	8001a58 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001a42:	2380      	movs	r3, #128	; 0x80
 8001a44:	021b      	lsls	r3, r3, #8
 8001a46:	61bb      	str	r3, [r7, #24]
        break;
 8001a48:	e006      	b.n	8001a58 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001a4e:	231e      	movs	r3, #30
 8001a50:	18fb      	adds	r3, r7, r3
 8001a52:	2201      	movs	r2, #1
 8001a54:	701a      	strb	r2, [r3, #0]
        break;
 8001a56:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d100      	bne.n	8001a60 <UART_SetConfig+0x180>
 8001a5e:	e097      	b.n	8001b90 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a64:	4b5c      	ldr	r3, [pc, #368]	; (8001bd8 <UART_SetConfig+0x2f8>)
 8001a66:	0052      	lsls	r2, r2, #1
 8001a68:	5ad3      	ldrh	r3, [r2, r3]
 8001a6a:	0019      	movs	r1, r3
 8001a6c:	69b8      	ldr	r0, [r7, #24]
 8001a6e:	f7fe fb4b 	bl	8000108 <__udivsi3>
 8001a72:	0003      	movs	r3, r0
 8001a74:	005a      	lsls	r2, r3, #1
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	085b      	lsrs	r3, r3, #1
 8001a7c:	18d2      	adds	r2, r2, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	0019      	movs	r1, r3
 8001a84:	0010      	movs	r0, r2
 8001a86:	f7fe fb3f 	bl	8000108 <__udivsi3>
 8001a8a:	0003      	movs	r3, r0
 8001a8c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	2b0f      	cmp	r3, #15
 8001a92:	d91c      	bls.n	8001ace <UART_SetConfig+0x1ee>
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	2380      	movs	r3, #128	; 0x80
 8001a98:	025b      	lsls	r3, r3, #9
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d217      	bcs.n	8001ace <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	b29a      	uxth	r2, r3
 8001aa2:	200e      	movs	r0, #14
 8001aa4:	183b      	adds	r3, r7, r0
 8001aa6:	210f      	movs	r1, #15
 8001aa8:	438a      	bics	r2, r1
 8001aaa:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	085b      	lsrs	r3, r3, #1
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	2207      	movs	r2, #7
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	b299      	uxth	r1, r3
 8001ab8:	183b      	adds	r3, r7, r0
 8001aba:	183a      	adds	r2, r7, r0
 8001abc:	8812      	ldrh	r2, [r2, #0]
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	183a      	adds	r2, r7, r0
 8001ac8:	8812      	ldrh	r2, [r2, #0]
 8001aca:	60da      	str	r2, [r3, #12]
 8001acc:	e060      	b.n	8001b90 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8001ace:	231e      	movs	r3, #30
 8001ad0:	18fb      	adds	r3, r7, r3
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	701a      	strb	r2, [r3, #0]
 8001ad6:	e05b      	b.n	8001b90 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8001ad8:	231f      	movs	r3, #31
 8001ada:	18fb      	adds	r3, r7, r3
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	2b08      	cmp	r3, #8
 8001ae0:	d01f      	beq.n	8001b22 <UART_SetConfig+0x242>
 8001ae2:	dc22      	bgt.n	8001b2a <UART_SetConfig+0x24a>
 8001ae4:	2b04      	cmp	r3, #4
 8001ae6:	d017      	beq.n	8001b18 <UART_SetConfig+0x238>
 8001ae8:	dc1f      	bgt.n	8001b2a <UART_SetConfig+0x24a>
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d002      	beq.n	8001af4 <UART_SetConfig+0x214>
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d005      	beq.n	8001afe <UART_SetConfig+0x21e>
 8001af2:	e01a      	b.n	8001b2a <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001af4:	f7ff fcf4 	bl	80014e0 <HAL_RCC_GetPCLK1Freq>
 8001af8:	0003      	movs	r3, r0
 8001afa:	61bb      	str	r3, [r7, #24]
        break;
 8001afc:	e01c      	b.n	8001b38 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8001afe:	4b33      	ldr	r3, [pc, #204]	; (8001bcc <UART_SetConfig+0x2ec>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	095b      	lsrs	r3, r3, #5
 8001b04:	2207      	movs	r2, #7
 8001b06:	4013      	ands	r3, r2
 8001b08:	3301      	adds	r3, #1
 8001b0a:	0019      	movs	r1, r3
 8001b0c:	4831      	ldr	r0, [pc, #196]	; (8001bd4 <UART_SetConfig+0x2f4>)
 8001b0e:	f7fe fafb 	bl	8000108 <__udivsi3>
 8001b12:	0003      	movs	r3, r0
 8001b14:	61bb      	str	r3, [r7, #24]
        break;
 8001b16:	e00f      	b.n	8001b38 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001b18:	f7ff fc96 	bl	8001448 <HAL_RCC_GetSysClockFreq>
 8001b1c:	0003      	movs	r3, r0
 8001b1e:	61bb      	str	r3, [r7, #24]
        break;
 8001b20:	e00a      	b.n	8001b38 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001b22:	2380      	movs	r3, #128	; 0x80
 8001b24:	021b      	lsls	r3, r3, #8
 8001b26:	61bb      	str	r3, [r7, #24]
        break;
 8001b28:	e006      	b.n	8001b38 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001b2e:	231e      	movs	r3, #30
 8001b30:	18fb      	adds	r3, r7, r3
 8001b32:	2201      	movs	r2, #1
 8001b34:	701a      	strb	r2, [r3, #0]
        break;
 8001b36:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8001b38:	69bb      	ldr	r3, [r7, #24]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d028      	beq.n	8001b90 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b42:	4b25      	ldr	r3, [pc, #148]	; (8001bd8 <UART_SetConfig+0x2f8>)
 8001b44:	0052      	lsls	r2, r2, #1
 8001b46:	5ad3      	ldrh	r3, [r2, r3]
 8001b48:	0019      	movs	r1, r3
 8001b4a:	69b8      	ldr	r0, [r7, #24]
 8001b4c:	f7fe fadc 	bl	8000108 <__udivsi3>
 8001b50:	0003      	movs	r3, r0
 8001b52:	001a      	movs	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	085b      	lsrs	r3, r3, #1
 8001b5a:	18d2      	adds	r2, r2, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	0019      	movs	r1, r3
 8001b62:	0010      	movs	r0, r2
 8001b64:	f7fe fad0 	bl	8000108 <__udivsi3>
 8001b68:	0003      	movs	r3, r0
 8001b6a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	2b0f      	cmp	r3, #15
 8001b70:	d90a      	bls.n	8001b88 <UART_SetConfig+0x2a8>
 8001b72:	693a      	ldr	r2, [r7, #16]
 8001b74:	2380      	movs	r3, #128	; 0x80
 8001b76:	025b      	lsls	r3, r3, #9
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d205      	bcs.n	8001b88 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	b29a      	uxth	r2, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	60da      	str	r2, [r3, #12]
 8001b86:	e003      	b.n	8001b90 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8001b88:	231e      	movs	r3, #30
 8001b8a:	18fb      	adds	r3, r7, r3
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	226a      	movs	r2, #106	; 0x6a
 8001b94:	2101      	movs	r1, #1
 8001b96:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2268      	movs	r2, #104	; 0x68
 8001b9c:	2101      	movs	r1, #1
 8001b9e:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8001bac:	231e      	movs	r3, #30
 8001bae:	18fb      	adds	r3, r7, r3
 8001bb0:	781b      	ldrb	r3, [r3, #0]
}
 8001bb2:	0018      	movs	r0, r3
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	b008      	add	sp, #32
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	46c0      	nop			; (mov r8, r8)
 8001bbc:	cfff69f3 	.word	0xcfff69f3
 8001bc0:	ffffcfff 	.word	0xffffcfff
 8001bc4:	11fff4ff 	.word	0x11fff4ff
 8001bc8:	40013800 	.word	0x40013800
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	40004400 	.word	0x40004400
 8001bd4:	02dc6c00 	.word	0x02dc6c00
 8001bd8:	0800238c 	.word	0x0800238c

08001bdc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be8:	2208      	movs	r2, #8
 8001bea:	4013      	ands	r3, r2
 8001bec:	d00b      	beq.n	8001c06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	4a4a      	ldr	r2, [pc, #296]	; (8001d20 <UART_AdvFeatureConfig+0x144>)
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	0019      	movs	r1, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	430a      	orrs	r2, r1
 8001c04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	d00b      	beq.n	8001c28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	4a43      	ldr	r2, [pc, #268]	; (8001d24 <UART_AdvFeatureConfig+0x148>)
 8001c18:	4013      	ands	r3, r2
 8001c1a:	0019      	movs	r1, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	430a      	orrs	r2, r1
 8001c26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c2c:	2202      	movs	r2, #2
 8001c2e:	4013      	ands	r3, r2
 8001c30:	d00b      	beq.n	8001c4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	4a3b      	ldr	r2, [pc, #236]	; (8001d28 <UART_AdvFeatureConfig+0x14c>)
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	0019      	movs	r1, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	430a      	orrs	r2, r1
 8001c48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c4e:	2204      	movs	r2, #4
 8001c50:	4013      	ands	r3, r2
 8001c52:	d00b      	beq.n	8001c6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	4a34      	ldr	r2, [pc, #208]	; (8001d2c <UART_AdvFeatureConfig+0x150>)
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	0019      	movs	r1, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c70:	2210      	movs	r2, #16
 8001c72:	4013      	ands	r3, r2
 8001c74:	d00b      	beq.n	8001c8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	4a2c      	ldr	r2, [pc, #176]	; (8001d30 <UART_AdvFeatureConfig+0x154>)
 8001c7e:	4013      	ands	r3, r2
 8001c80:	0019      	movs	r1, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	430a      	orrs	r2, r1
 8001c8c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c92:	2220      	movs	r2, #32
 8001c94:	4013      	ands	r3, r2
 8001c96:	d00b      	beq.n	8001cb0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	4a25      	ldr	r2, [pc, #148]	; (8001d34 <UART_AdvFeatureConfig+0x158>)
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	0019      	movs	r1, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	430a      	orrs	r2, r1
 8001cae:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb4:	2240      	movs	r2, #64	; 0x40
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	d01d      	beq.n	8001cf6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	4a1d      	ldr	r2, [pc, #116]	; (8001d38 <UART_AdvFeatureConfig+0x15c>)
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	0019      	movs	r1, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	430a      	orrs	r2, r1
 8001cd0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001cd6:	2380      	movs	r3, #128	; 0x80
 8001cd8:	035b      	lsls	r3, r3, #13
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d10b      	bne.n	8001cf6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	4a15      	ldr	r2, [pc, #84]	; (8001d3c <UART_AdvFeatureConfig+0x160>)
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	0019      	movs	r1, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cfa:	2280      	movs	r2, #128	; 0x80
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	d00b      	beq.n	8001d18 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	4a0e      	ldr	r2, [pc, #56]	; (8001d40 <UART_AdvFeatureConfig+0x164>)
 8001d08:	4013      	ands	r3, r2
 8001d0a:	0019      	movs	r1, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	430a      	orrs	r2, r1
 8001d16:	605a      	str	r2, [r3, #4]
  }
}
 8001d18:	46c0      	nop			; (mov r8, r8)
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	b002      	add	sp, #8
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	ffff7fff 	.word	0xffff7fff
 8001d24:	fffdffff 	.word	0xfffdffff
 8001d28:	fffeffff 	.word	0xfffeffff
 8001d2c:	fffbffff 	.word	0xfffbffff
 8001d30:	ffffefff 	.word	0xffffefff
 8001d34:	ffffdfff 	.word	0xffffdfff
 8001d38:	ffefffff 	.word	0xffefffff
 8001d3c:	ff9fffff 	.word	0xff9fffff
 8001d40:	fff7ffff 	.word	0xfff7ffff

08001d44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b092      	sub	sp, #72	; 0x48
 8001d48:	af02      	add	r7, sp, #8
 8001d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2290      	movs	r2, #144	; 0x90
 8001d50:	2100      	movs	r1, #0
 8001d52:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8001d54:	f7fe fdd8 	bl	8000908 <HAL_GetTick>
 8001d58:	0003      	movs	r3, r0
 8001d5a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2208      	movs	r2, #8
 8001d64:	4013      	ands	r3, r2
 8001d66:	2b08      	cmp	r3, #8
 8001d68:	d12d      	bne.n	8001dc6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001d6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d6c:	2280      	movs	r2, #128	; 0x80
 8001d6e:	0391      	lsls	r1, r2, #14
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	4a47      	ldr	r2, [pc, #284]	; (8001e90 <UART_CheckIdleState+0x14c>)
 8001d74:	9200      	str	r2, [sp, #0]
 8001d76:	2200      	movs	r2, #0
 8001d78:	f000 f88e 	bl	8001e98 <UART_WaitOnFlagUntilTimeout>
 8001d7c:	1e03      	subs	r3, r0, #0
 8001d7e:	d022      	beq.n	8001dc6 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001d80:	f3ef 8310 	mrs	r3, PRIMASK
 8001d84:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8001d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8001d88:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d90:	f383 8810 	msr	PRIMASK, r3
}
 8001d94:	46c0      	nop			; (mov r8, r8)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2180      	movs	r1, #128	; 0x80
 8001da2:	438a      	bics	r2, r1
 8001da4:	601a      	str	r2, [r3, #0]
 8001da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001da8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dac:	f383 8810 	msr	PRIMASK, r3
}
 8001db0:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2288      	movs	r2, #136	; 0x88
 8001db6:	2120      	movs	r1, #32
 8001db8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2284      	movs	r2, #132	; 0x84
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e060      	b.n	8001e88 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2204      	movs	r2, #4
 8001dce:	4013      	ands	r3, r2
 8001dd0:	2b04      	cmp	r3, #4
 8001dd2:	d146      	bne.n	8001e62 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001dd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dd6:	2280      	movs	r2, #128	; 0x80
 8001dd8:	03d1      	lsls	r1, r2, #15
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	4a2c      	ldr	r2, [pc, #176]	; (8001e90 <UART_CheckIdleState+0x14c>)
 8001dde:	9200      	str	r2, [sp, #0]
 8001de0:	2200      	movs	r2, #0
 8001de2:	f000 f859 	bl	8001e98 <UART_WaitOnFlagUntilTimeout>
 8001de6:	1e03      	subs	r3, r0, #0
 8001de8:	d03b      	beq.n	8001e62 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001dea:	f3ef 8310 	mrs	r3, PRIMASK
 8001dee:	60fb      	str	r3, [r7, #12]
  return(result);
 8001df0:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8001df2:	637b      	str	r3, [r7, #52]	; 0x34
 8001df4:	2301      	movs	r3, #1
 8001df6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	f383 8810 	msr	PRIMASK, r3
}
 8001dfe:	46c0      	nop			; (mov r8, r8)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4922      	ldr	r1, [pc, #136]	; (8001e94 <UART_CheckIdleState+0x150>)
 8001e0c:	400a      	ands	r2, r1
 8001e0e:	601a      	str	r2, [r3, #0]
 8001e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e12:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	f383 8810 	msr	PRIMASK, r3
}
 8001e1a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001e1c:	f3ef 8310 	mrs	r3, PRIMASK
 8001e20:	61bb      	str	r3, [r7, #24]
  return(result);
 8001e22:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e24:	633b      	str	r3, [r7, #48]	; 0x30
 8001e26:	2301      	movs	r3, #1
 8001e28:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	f383 8810 	msr	PRIMASK, r3
}
 8001e30:	46c0      	nop			; (mov r8, r8)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	689a      	ldr	r2, [r3, #8]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2101      	movs	r1, #1
 8001e3e:	438a      	bics	r2, r1
 8001e40:	609a      	str	r2, [r3, #8]
 8001e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e44:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e46:	6a3b      	ldr	r3, [r7, #32]
 8001e48:	f383 8810 	msr	PRIMASK, r3
}
 8001e4c:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	228c      	movs	r2, #140	; 0x8c
 8001e52:	2120      	movs	r1, #32
 8001e54:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2284      	movs	r2, #132	; 0x84
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e012      	b.n	8001e88 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2288      	movs	r2, #136	; 0x88
 8001e66:	2120      	movs	r1, #32
 8001e68:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	228c      	movs	r2, #140	; 0x8c
 8001e6e:	2120      	movs	r1, #32
 8001e70:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2284      	movs	r2, #132	; 0x84
 8001e82:	2100      	movs	r1, #0
 8001e84:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001e86:	2300      	movs	r3, #0
}
 8001e88:	0018      	movs	r0, r3
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	b010      	add	sp, #64	; 0x40
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	01ffffff 	.word	0x01ffffff
 8001e94:	fffffedf 	.word	0xfffffedf

08001e98 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	60b9      	str	r1, [r7, #8]
 8001ea2:	603b      	str	r3, [r7, #0]
 8001ea4:	1dfb      	adds	r3, r7, #7
 8001ea6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ea8:	e04b      	b.n	8001f42 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	3301      	adds	r3, #1
 8001eae:	d048      	beq.n	8001f42 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001eb0:	f7fe fd2a 	bl	8000908 <HAL_GetTick>
 8001eb4:	0002      	movs	r2, r0
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d302      	bcc.n	8001ec6 <UART_WaitOnFlagUntilTimeout+0x2e>
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d101      	bne.n	8001eca <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e04b      	b.n	8001f62 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2204      	movs	r2, #4
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	d035      	beq.n	8001f42 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	69db      	ldr	r3, [r3, #28]
 8001edc:	2208      	movs	r2, #8
 8001ede:	4013      	ands	r3, r2
 8001ee0:	2b08      	cmp	r3, #8
 8001ee2:	d111      	bne.n	8001f08 <UART_WaitOnFlagUntilTimeout+0x70>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2208      	movs	r2, #8
 8001eea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	0018      	movs	r0, r3
 8001ef0:	f000 f83c 	bl	8001f6c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2290      	movs	r2, #144	; 0x90
 8001ef8:	2108      	movs	r1, #8
 8001efa:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2284      	movs	r2, #132	; 0x84
 8001f00:	2100      	movs	r1, #0
 8001f02:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e02c      	b.n	8001f62 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	69da      	ldr	r2, [r3, #28]
 8001f0e:	2380      	movs	r3, #128	; 0x80
 8001f10:	011b      	lsls	r3, r3, #4
 8001f12:	401a      	ands	r2, r3
 8001f14:	2380      	movs	r3, #128	; 0x80
 8001f16:	011b      	lsls	r3, r3, #4
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d112      	bne.n	8001f42 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2280      	movs	r2, #128	; 0x80
 8001f22:	0112      	lsls	r2, r2, #4
 8001f24:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	0018      	movs	r0, r3
 8001f2a:	f000 f81f 	bl	8001f6c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2290      	movs	r2, #144	; 0x90
 8001f32:	2120      	movs	r1, #32
 8001f34:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2284      	movs	r2, #132	; 0x84
 8001f3a:	2100      	movs	r1, #0
 8001f3c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e00f      	b.n	8001f62 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	69db      	ldr	r3, [r3, #28]
 8001f48:	68ba      	ldr	r2, [r7, #8]
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	68ba      	ldr	r2, [r7, #8]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	425a      	negs	r2, r3
 8001f52:	4153      	adcs	r3, r2
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	001a      	movs	r2, r3
 8001f58:	1dfb      	adds	r3, r7, #7
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d0a4      	beq.n	8001eaa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	0018      	movs	r0, r3
 8001f64:	46bd      	mov	sp, r7
 8001f66:	b004      	add	sp, #16
 8001f68:	bd80      	pop	{r7, pc}
	...

08001f6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b08e      	sub	sp, #56	; 0x38
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001f74:	f3ef 8310 	mrs	r3, PRIMASK
 8001f78:	617b      	str	r3, [r7, #20]
  return(result);
 8001f7a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8001f7c:	637b      	str	r3, [r7, #52]	; 0x34
 8001f7e:	2301      	movs	r3, #1
 8001f80:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	f383 8810 	msr	PRIMASK, r3
}
 8001f88:	46c0      	nop			; (mov r8, r8)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4926      	ldr	r1, [pc, #152]	; (8002030 <UART_EndRxTransfer+0xc4>)
 8001f96:	400a      	ands	r2, r1
 8001f98:	601a      	str	r2, [r3, #0]
 8001f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f9c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	f383 8810 	msr	PRIMASK, r3
}
 8001fa4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001fa6:	f3ef 8310 	mrs	r3, PRIMASK
 8001faa:	623b      	str	r3, [r7, #32]
  return(result);
 8001fac:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8001fae:	633b      	str	r3, [r7, #48]	; 0x30
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb6:	f383 8810 	msr	PRIMASK, r3
}
 8001fba:	46c0      	nop			; (mov r8, r8)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	689a      	ldr	r2, [r3, #8]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	491b      	ldr	r1, [pc, #108]	; (8002034 <UART_EndRxTransfer+0xc8>)
 8001fc8:	400a      	ands	r2, r1
 8001fca:	609a      	str	r2, [r3, #8]
 8001fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fce:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fd2:	f383 8810 	msr	PRIMASK, r3
}
 8001fd6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d118      	bne.n	8002012 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001fe0:	f3ef 8310 	mrs	r3, PRIMASK
 8001fe4:	60bb      	str	r3, [r7, #8]
  return(result);
 8001fe6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fea:	2301      	movs	r3, #1
 8001fec:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	f383 8810 	msr	PRIMASK, r3
}
 8001ff4:	46c0      	nop			; (mov r8, r8)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2110      	movs	r1, #16
 8002002:	438a      	bics	r2, r1
 8002004:	601a      	str	r2, [r3, #0]
 8002006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002008:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	f383 8810 	msr	PRIMASK, r3
}
 8002010:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	228c      	movs	r2, #140	; 0x8c
 8002016:	2120      	movs	r1, #32
 8002018:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	675a      	str	r2, [r3, #116]	; 0x74
}
 8002026:	46c0      	nop			; (mov r8, r8)
 8002028:	46bd      	mov	sp, r7
 800202a:	b00e      	add	sp, #56	; 0x38
 800202c:	bd80      	pop	{r7, pc}
 800202e:	46c0      	nop			; (mov r8, r8)
 8002030:	fffffedf 	.word	0xfffffedf
 8002034:	effffffe 	.word	0xeffffffe

08002038 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2284      	movs	r2, #132	; 0x84
 8002044:	5c9b      	ldrb	r3, [r3, r2]
 8002046:	2b01      	cmp	r3, #1
 8002048:	d101      	bne.n	800204e <HAL_UARTEx_DisableFifoMode+0x16>
 800204a:	2302      	movs	r3, #2
 800204c:	e027      	b.n	800209e <HAL_UARTEx_DisableFifoMode+0x66>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2284      	movs	r2, #132	; 0x84
 8002052:	2101      	movs	r1, #1
 8002054:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2288      	movs	r2, #136	; 0x88
 800205a:	2124      	movs	r1, #36	; 0x24
 800205c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2101      	movs	r1, #1
 8002072:	438a      	bics	r2, r1
 8002074:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	4a0b      	ldr	r2, [pc, #44]	; (80020a8 <HAL_UARTEx_DisableFifoMode+0x70>)
 800207a:	4013      	ands	r3, r2
 800207c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	68fa      	ldr	r2, [r7, #12]
 800208a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2288      	movs	r2, #136	; 0x88
 8002090:	2120      	movs	r1, #32
 8002092:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2284      	movs	r2, #132	; 0x84
 8002098:	2100      	movs	r1, #0
 800209a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800209c:	2300      	movs	r3, #0
}
 800209e:	0018      	movs	r0, r3
 80020a0:	46bd      	mov	sp, r7
 80020a2:	b004      	add	sp, #16
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	46c0      	nop			; (mov r8, r8)
 80020a8:	dfffffff 	.word	0xdfffffff

080020ac <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2284      	movs	r2, #132	; 0x84
 80020ba:	5c9b      	ldrb	r3, [r3, r2]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d101      	bne.n	80020c4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80020c0:	2302      	movs	r3, #2
 80020c2:	e02e      	b.n	8002122 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2284      	movs	r2, #132	; 0x84
 80020c8:	2101      	movs	r1, #1
 80020ca:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2288      	movs	r2, #136	; 0x88
 80020d0:	2124      	movs	r1, #36	; 0x24
 80020d2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2101      	movs	r1, #1
 80020e8:	438a      	bics	r2, r1
 80020ea:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	08d9      	lsrs	r1, r3, #3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	683a      	ldr	r2, [r7, #0]
 80020fc:	430a      	orrs	r2, r1
 80020fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	0018      	movs	r0, r3
 8002104:	f000 f854 	bl	80021b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	68fa      	ldr	r2, [r7, #12]
 800210e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2288      	movs	r2, #136	; 0x88
 8002114:	2120      	movs	r1, #32
 8002116:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2284      	movs	r2, #132	; 0x84
 800211c:	2100      	movs	r1, #0
 800211e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002120:	2300      	movs	r3, #0
}
 8002122:	0018      	movs	r0, r3
 8002124:	46bd      	mov	sp, r7
 8002126:	b004      	add	sp, #16
 8002128:	bd80      	pop	{r7, pc}
	...

0800212c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2284      	movs	r2, #132	; 0x84
 800213a:	5c9b      	ldrb	r3, [r3, r2]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d101      	bne.n	8002144 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002140:	2302      	movs	r3, #2
 8002142:	e02f      	b.n	80021a4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2284      	movs	r2, #132	; 0x84
 8002148:	2101      	movs	r1, #1
 800214a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2288      	movs	r2, #136	; 0x88
 8002150:	2124      	movs	r1, #36	; 0x24
 8002152:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2101      	movs	r1, #1
 8002168:	438a      	bics	r2, r1
 800216a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	4a0e      	ldr	r2, [pc, #56]	; (80021ac <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8002174:	4013      	ands	r3, r2
 8002176:	0019      	movs	r1, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	683a      	ldr	r2, [r7, #0]
 800217e:	430a      	orrs	r2, r1
 8002180:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	0018      	movs	r0, r3
 8002186:	f000 f813 	bl	80021b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	68fa      	ldr	r2, [r7, #12]
 8002190:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2288      	movs	r2, #136	; 0x88
 8002196:	2120      	movs	r1, #32
 8002198:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2284      	movs	r2, #132	; 0x84
 800219e:	2100      	movs	r1, #0
 80021a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80021a2:	2300      	movs	r3, #0
}
 80021a4:	0018      	movs	r0, r3
 80021a6:	46bd      	mov	sp, r7
 80021a8:	b004      	add	sp, #16
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	f1ffffff 	.word	0xf1ffffff

080021b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80021b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d108      	bne.n	80021d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	226a      	movs	r2, #106	; 0x6a
 80021c4:	2101      	movs	r1, #1
 80021c6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2268      	movs	r2, #104	; 0x68
 80021cc:	2101      	movs	r1, #1
 80021ce:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80021d0:	e043      	b.n	800225a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80021d2:	260f      	movs	r6, #15
 80021d4:	19bb      	adds	r3, r7, r6
 80021d6:	2208      	movs	r2, #8
 80021d8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80021da:	200e      	movs	r0, #14
 80021dc:	183b      	adds	r3, r7, r0
 80021de:	2208      	movs	r2, #8
 80021e0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	0e5b      	lsrs	r3, r3, #25
 80021ea:	b2da      	uxtb	r2, r3
 80021ec:	240d      	movs	r4, #13
 80021ee:	193b      	adds	r3, r7, r4
 80021f0:	2107      	movs	r1, #7
 80021f2:	400a      	ands	r2, r1
 80021f4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	0f5b      	lsrs	r3, r3, #29
 80021fe:	b2da      	uxtb	r2, r3
 8002200:	250c      	movs	r5, #12
 8002202:	197b      	adds	r3, r7, r5
 8002204:	2107      	movs	r1, #7
 8002206:	400a      	ands	r2, r1
 8002208:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800220a:	183b      	adds	r3, r7, r0
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	197a      	adds	r2, r7, r5
 8002210:	7812      	ldrb	r2, [r2, #0]
 8002212:	4914      	ldr	r1, [pc, #80]	; (8002264 <UARTEx_SetNbDataToProcess+0xb4>)
 8002214:	5c8a      	ldrb	r2, [r1, r2]
 8002216:	435a      	muls	r2, r3
 8002218:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800221a:	197b      	adds	r3, r7, r5
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	4a12      	ldr	r2, [pc, #72]	; (8002268 <UARTEx_SetNbDataToProcess+0xb8>)
 8002220:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002222:	0019      	movs	r1, r3
 8002224:	f7fd fffa 	bl	800021c <__divsi3>
 8002228:	0003      	movs	r3, r0
 800222a:	b299      	uxth	r1, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	226a      	movs	r2, #106	; 0x6a
 8002230:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002232:	19bb      	adds	r3, r7, r6
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	193a      	adds	r2, r7, r4
 8002238:	7812      	ldrb	r2, [r2, #0]
 800223a:	490a      	ldr	r1, [pc, #40]	; (8002264 <UARTEx_SetNbDataToProcess+0xb4>)
 800223c:	5c8a      	ldrb	r2, [r1, r2]
 800223e:	435a      	muls	r2, r3
 8002240:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8002242:	193b      	adds	r3, r7, r4
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	4a08      	ldr	r2, [pc, #32]	; (8002268 <UARTEx_SetNbDataToProcess+0xb8>)
 8002248:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800224a:	0019      	movs	r1, r3
 800224c:	f7fd ffe6 	bl	800021c <__divsi3>
 8002250:	0003      	movs	r3, r0
 8002252:	b299      	uxth	r1, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2268      	movs	r2, #104	; 0x68
 8002258:	5299      	strh	r1, [r3, r2]
}
 800225a:	46c0      	nop			; (mov r8, r8)
 800225c:	46bd      	mov	sp, r7
 800225e:	b005      	add	sp, #20
 8002260:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002262:	46c0      	nop			; (mov r8, r8)
 8002264:	080023a4 	.word	0x080023a4
 8002268:	080023ac 	.word	0x080023ac

0800226c <memset>:
 800226c:	0003      	movs	r3, r0
 800226e:	1882      	adds	r2, r0, r2
 8002270:	4293      	cmp	r3, r2
 8002272:	d100      	bne.n	8002276 <memset+0xa>
 8002274:	4770      	bx	lr
 8002276:	7019      	strb	r1, [r3, #0]
 8002278:	3301      	adds	r3, #1
 800227a:	e7f9      	b.n	8002270 <memset+0x4>

0800227c <__libc_init_array>:
 800227c:	b570      	push	{r4, r5, r6, lr}
 800227e:	2600      	movs	r6, #0
 8002280:	4c0c      	ldr	r4, [pc, #48]	; (80022b4 <__libc_init_array+0x38>)
 8002282:	4d0d      	ldr	r5, [pc, #52]	; (80022b8 <__libc_init_array+0x3c>)
 8002284:	1b64      	subs	r4, r4, r5
 8002286:	10a4      	asrs	r4, r4, #2
 8002288:	42a6      	cmp	r6, r4
 800228a:	d109      	bne.n	80022a0 <__libc_init_array+0x24>
 800228c:	2600      	movs	r6, #0
 800228e:	f000 f823 	bl	80022d8 <_init>
 8002292:	4c0a      	ldr	r4, [pc, #40]	; (80022bc <__libc_init_array+0x40>)
 8002294:	4d0a      	ldr	r5, [pc, #40]	; (80022c0 <__libc_init_array+0x44>)
 8002296:	1b64      	subs	r4, r4, r5
 8002298:	10a4      	asrs	r4, r4, #2
 800229a:	42a6      	cmp	r6, r4
 800229c:	d105      	bne.n	80022aa <__libc_init_array+0x2e>
 800229e:	bd70      	pop	{r4, r5, r6, pc}
 80022a0:	00b3      	lsls	r3, r6, #2
 80022a2:	58eb      	ldr	r3, [r5, r3]
 80022a4:	4798      	blx	r3
 80022a6:	3601      	adds	r6, #1
 80022a8:	e7ee      	b.n	8002288 <__libc_init_array+0xc>
 80022aa:	00b3      	lsls	r3, r6, #2
 80022ac:	58eb      	ldr	r3, [r5, r3]
 80022ae:	4798      	blx	r3
 80022b0:	3601      	adds	r6, #1
 80022b2:	e7f2      	b.n	800229a <__libc_init_array+0x1e>
 80022b4:	080023b4 	.word	0x080023b4
 80022b8:	080023b4 	.word	0x080023b4
 80022bc:	080023b8 	.word	0x080023b8
 80022c0:	080023b4 	.word	0x080023b4

080022c4 <memcpy>:
 80022c4:	2300      	movs	r3, #0
 80022c6:	b510      	push	{r4, lr}
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d100      	bne.n	80022ce <memcpy+0xa>
 80022cc:	bd10      	pop	{r4, pc}
 80022ce:	5ccc      	ldrb	r4, [r1, r3]
 80022d0:	54c4      	strb	r4, [r0, r3]
 80022d2:	3301      	adds	r3, #1
 80022d4:	e7f8      	b.n	80022c8 <memcpy+0x4>
	...

080022d8 <_init>:
 80022d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022da:	46c0      	nop			; (mov r8, r8)
 80022dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022de:	bc08      	pop	{r3}
 80022e0:	469e      	mov	lr, r3
 80022e2:	4770      	bx	lr

080022e4 <_fini>:
 80022e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022e6:	46c0      	nop			; (mov r8, r8)
 80022e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022ea:	bc08      	pop	{r3}
 80022ec:	469e      	mov	lr, r3
 80022ee:	4770      	bx	lr
